import java.util.ArrayList
import java.util.Arrays

constant база_первичного_генератора = Math.round(Math.random() * 9999999)
sequence базы_генераторов = new Uniform(база_первичного_генератора, 0, 9999999)
sequence нормальное_распределение = new Normal(Math.round(базы_генераторов.next()) as int, 0, 1)
sequence вероятность_срок_поставки = new Values(#[1, 1, 0, 1, 0, 1, 1, 0, 0])
sequence вероятность_нужна = new Values(#[1, 0, 0, 1, 1, 0, 1, 0, 0])

constant болезнь_менеджера_1 = false
constant болезнь_менеджера_2 = false
constant болезнь_менеджера_3 = false

constant время_начала_болезни_менеджера_1 = 60 * 24 * 30
constant время_конца_болезни_менеджера_1 = 60 * 24 * 90

constant время_начала_болезни_менеджера_2 = 60 * 24 * 30
constant время_конца_болезни_менеджера_2 = 60 * 24 * 300

constant время_начала_болезни_менеджера_3 = 60 * 24 * 60
constant время_конца_болезни_менеджера_3 = 60 * 24 * 120

constant болезнь_курьера_1 = false
constant болезнь_курьера_2 = false

constant время_начала_болезни_курьера_1 = 60 * 24 * 1
constant время_конца_болезни_курьера_1 = 60 * 24 * 360

constant время_начала_болезни_курьера_2 = 60 * 24 * 1
constant время_конца_болезни_курьера_2 = 60 * 24 * 360

constant вероятность_заказных_деталей = 0.5
constant вероятность_необходимости_поставки = 0.7

sequence время_доставки_деталей = new Uniform(Math.round(базы_генераторов.next()),
	2 * 24 * 60, 10 * 24 * 60)
sequence время_согласования_заказа = new Uniform(Math.round(базы_генераторов.next()),
	20, 1 * 24 * 60)

double PoissonExponential(double rate) {
	var double s = нормальное_распределение.next();
	s = Math.abs((s + 2)) * rate
	return s;
}

enum Состояние_менеджера {
	СВОБОДЕН, ЗАНЯТ, БОЛЕН
}

type Менеджер {
	int номер
	Состояние_менеджера состояние
	double производительность
	int количество_обслуженных_заявок
}

resource менеджер_1 = Менеджер.create(0, Состояние_менеджера.СВОБОДЕН, 8, 0)
resource менеджер_2 = Менеджер.create(1, Состояние_менеджера.СВОБОДЕН, 6.5, 0)
resource менеджер_3 = Менеджер.create(2, Состояние_менеджера.СВОБОДЕН, 5.7, 0)

type Курьер {
	int номер
	Состояние_курьера состояние
	double производительность
	int количество_обслуженных_заявок
}

resource курьер_1 = Курьер.create(0, Состояние_курьера.СВОБОДЕН, 2.5, 0)
resource курьер_2 = Курьер.create(1, Состояние_курьера.СВОБОДЕН, 3, 0)

enum Состояние_курьера {
	ЗАНЯТ, СВОБОДЕН, БОЛЕН
}

type Инженер {
	int номер
	double производительность
	int количество_созданных_заявок
	int количество_выполненных_заявок
	double время_выдачи_заявки
	boolean анимация
}

resource инженер_1 = Инженер.create(0, 3.0, 0, 0, 0, false)
resource инженер_2 = Инженер.create(1, 2.7, 0, 0, 0, false)
resource инженер_3 = Инженер.create(2, 2.5, 0, 0, 0, false)
resource инженер_4 = Инженер.create(3, 2.2, 0, 0, 0, false)
resource инженер_5 = Инженер.create(4, 2.0, 0, 0, 0, false)
resource инженер_6 = Инженер.create(5, 1.8, 0, 0, 0, false)
resource инженер_7 = Инженер.create(6, 1.7, 0, 0, 0, false)
resource инженер_8 = Инженер.create(7, 1.5, 0, 0, 0, false)

def init() {
	log("База первичного генератора " + база_первичного_генератора)
	Поступление_заявки.plan(0, инженер_1)
	Поступление_заявки.plan(30, инженер_2)
	Поступление_заявки.plan(60, инженер_3)
	Поступление_заявки.plan(90, инженер_4)
	Поступление_заявки.plan(120, инженер_5)
	Поступление_заявки.plan(150, инженер_6)
	Поступление_заявки.plan(180, инженер_7)
	Поступление_заявки.plan(210, инженер_8)
	if (болезнь_менеджера_1 == true)
		Менеджер_болеет.plan(время_начала_болезни_менеджера_1, менеджер_1)
	if (болезнь_менеджера_2 == true)
		Менеджер_болеет.plan(время_начала_болезни_менеджера_2, менеджер_2)
	if (болезнь_менеджера_3 == true)
		Менеджер_болеет.plan(время_начала_болезни_менеджера_3, менеджер_3)
	if (болезнь_курьера_1 == true)
		Курьер_болеет.plan(время_начала_болезни_курьера_1, курьер_1)
	if (болезнь_курьера_2 == true)
		Курьер_болеет.plan(время_начала_болезни_курьера_2, курьер_2)
}

enum Статус_заявки_на_запчасть {
       Ожидает_обработки, Обрабатывается_менеджером, Обработана_менеджером,
       Согласовывается_инженером, Ожидается_поставка, Доставляется_курьером, Выполнена, Отменена
}

type Заявка_на_запасные_части {
	Статус_заявки_на_запчасть статус
	Инженер инженер
	double срок_поставки
	boolean флаг_анимации
}

type Статистика {
	int поступило_заявок_от_инженеров
	int количество_заявок_на_заказные
	int количество_заявок_на_базовые
	int количество_обслуженных_заявок
	int вероятность_срок_поставки
	int количество_отмененных_заявок
	int количество_работ_менеджер_1
	int количество_работ_менеджер_2
	int количество_работ_менеджер_3
	int количество_работ_курьер_1
	int количество_работ_курьер_2

	double минимальная_работа_менеджера_1
	double минимальная_работа_менеджера_2
	double минимальная_работа_менеджера_3

	double максимальная_работа_менеджера_1
	double максимальная_работа_менеджера_2
	double максимальная_работа_менеджера_3
	double полная_работа_менеджера_1
	double полная_работа_менеджера_2
	double полная_работа_менеджера_3

	double минимальная_работа_курьера_1
	double минимальная_работа_курьера_2

	double максимальная_работа_курьера_1
	double максимальная_работа_курьера_2
	double полная_работа_курьера_1
	double полная_работа_курьера_2
}

type Анимация {
	ArrayList<Boolean> инженер
	ArrayList<Double> инженер_время_выдачи_заявки
	ArrayList<Boolean> менеджер
	ArrayList<Boolean> курьер
	ArrayList<Integer> инженер_количество_созданных_заявок
	ArrayList<Integer> менеджер_количество_обслуженных_заявок
	ArrayList<Integer> курьер_количество_обслуженных_заявок
}

resource анимация = Анимация.create(
	new ArrayList<Boolean>(Arrays.asList(false, false, false, false, false, false, false, false)),
	new ArrayList<Double>(Arrays.asList(0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0)),
	new ArrayList<Boolean>(Arrays.asList(false, false, false)),
	new ArrayList<Boolean>(Arrays.asList(false, false)),
	new ArrayList<Integer>(Arrays.asList(0, 0, 0, 0, 0, 0, 0, 0)),
	new ArrayList<Integer>(Arrays.asList(0, 0, 0)),
	new ArrayList<Integer>(Arrays.asList(0, 0)))
	
resource статистика = Статистика.create(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10000, 10000, 10000,
	0, 0, 0, 0, 0, 0, 10000, 10000, 0, 0, 0, 0)

def terminateCondition() {
	return currentTime > 365 * 24 * 60;
}

double Рассчитать_срок_поставки() {
	статистика.вероятность_срок_поставки = вероятность_срок_поставки.next()
	if (статистика.вероятность_срок_поставки == 1)
		return Math.max(время_доставки_деталей.next(), 0)
	else
		return 0
}

event Менеджер_болеет(Менеджер менеджер) {
	менеджер.состояние = Состояние_менеджера.БОЛЕН
}

event Курьер_болеет(Курьер курьер) {
	курьер.состояние = Состояние_курьера.БОЛЕН
}

rule Выздоровление_менеджера() {
	relevant менеджер = Менеджер.all.filter[(состояние == Состояние_менеджера.БОЛЕН) &&
		((currentTime > время_конца_болезни_менеджера_1 && номер == 1) ||
		(currentTime > время_конца_болезни_менеджера_2 && номер == 2) ||
		(currentTime > время_конца_болезни_менеджера_3 && номер == 3))].any
		
	def execute() {
		менеджер.состояние = Состояние_менеджера.СВОБОДЕН
	}
}

rule Выздоровление_курьера() {
	relevant курьер = Курьер.all.filter[(состояние == Состояние_курьера.БОЛЕН) &&
		((currentTime > время_конца_болезни_курьера_1 && номер == 1) ||
		(currentTime > время_конца_болезни_курьера_2 && номер == 2))].any
		
	def execute() {
		курьер.состояние = Состояние_курьера.СВОБОДЕН
	}
}

event Поступление_заявки(Инженер инженер) {
	инженер.количество_созданных_заявок = инженер.количество_созданных_заявок + 1
	анимация.инженер.add(инженер.номер, true)
	анимация.инженер_время_выдачи_заявки.add(инженер.номер, currentTime)
	анимация.инженер_количество_созданных_заявок.add(инженер.номер,
		анимация.инженер_количество_созданных_заявок.get(инженер.номер) + 1)
	статистика.поступило_заявок_от_инженеров = статистика.поступило_заявок_от_инженеров + 1
	val double срок_поставки = Рассчитать_срок_поставки()
	if (срок_поставки == 0)
		статистика.количество_заявок_на_базовые = статистика.количество_заявок_на_базовые + 1
	else
		статистика.количество_заявок_на_заказные = статистика.количество_заявок_на_заказные + 1
	Заявка_на_запасные_части.create(Статус_заявки_на_запчасть.Ожидает_обработки,
		инженер, срок_поставки, false)
	val double время_до_следующей_заявки = PoissonExponential(60 * 24 / инженер.производительность)
	Поступление_заявки.plan(currentTime + время_до_следующей_заявки, инженер)
}

operation Обработка_заявки_менеджером() {
	relevant заявка = Заявка_на_запасные_части.all.filter[
		статус == Статус_заявки_на_запчасть.Ожидает_обработки].any
	relevant менеджер = Менеджер.all.filter[состояние == Состояние_менеджера.СВОБОДЕН].any
	
	def begin() {
		заявка.статус = Статус_заявки_на_запчасть.Обрабатывается_менеджером
		менеджер.состояние = Состояние_менеджера.ЗАНЯТ
		анимация.менеджер.add(менеджер.номер, true)
	}
	def duration() {
		val double темп_менеджер = PoissonExponential(60 * 24 / менеджер.производительность)
		Рассчет_трудозатрат_менеджеров(менеджер, темп_менеджер)
		return темп_менеджер
	}
	def end() {
		анимация.менеджер.add(менеджер.номер, false)
		if (менеджер.состояние == Состояние_менеджера.ЗАНЯТ) {
			заявка.статус = Статус_заявки_на_запчасть.Обработана_менеджером
			менеджер.состояние = Состояние_менеджера.СВОБОДЕН
			менеджер.количество_обслуженных_заявок = менеджер.количество_обслуженных_заявок + 1
			заявка.инженер.количество_созданных_заявок = заявка.инженер.количество_созданных_заявок + 1
			анимация.менеджер_количество_обслуженных_заявок.add(менеджер.номер,
				анимация.менеджер_количество_обслуженных_заявок.get(менеджер.номер) + 1)
		} else if (менеджер.состояние == Состояние_менеджера.БОЛЕН)
			заявка.статус = Статус_заявки_на_запчасть.Ожидает_обработки
	}
}

void Рассчет_трудозатрат_менеджеров(Менеджер менеджер, double темп_менеджер) {
	if (менеджер.номер == 0) {
		статистика.количество_работ_менеджер_1 = статистика.количество_работ_менеджер_1 + 1
		статистика.полная_работа_менеджера_1 = статистика.полная_работа_менеджера_1 + темп_менеджер
		if (темп_менеджер < статистика.минимальная_работа_менеджера_1)
			статистика.минимальная_работа_менеджера_1 = темп_менеджер
		if (темп_менеджер > статистика.максимальная_работа_менеджера_1)
			статистика.максимальная_работа_менеджера_1 = темп_менеджер
	} else if (менеджер.номер == 1) {
		статистика.количество_работ_менеджер_2 = статистика.количество_работ_менеджер_2 + 1
		статистика.полная_работа_менеджера_2 = статистика.полная_работа_менеджера_2 + темп_менеджер
		if (темп_менеджер < статистика.минимальная_работа_менеджера_2)
			статистика.минимальная_работа_менеджера_2 = темп_менеджер
		if (темп_менеджер > статистика.максимальная_работа_менеджера_2)
			статистика.максимальная_работа_менеджера_2 = темп_менеджер
	} else if (менеджер.номер == 2) {
		статистика.количество_работ_менеджер_3 = статистика.количество_работ_менеджер_3 + 1
		статистика.полная_работа_менеджера_3 = статистика.полная_работа_менеджера_3 + темп_менеджер
		if (темп_менеджер < статистика.минимальная_работа_менеджера_3)
			статистика.минимальная_работа_менеджера_3 = темп_менеджер
		if (темп_менеджер > статистика.максимальная_работа_менеджера_3)
			статистика.максимальная_работа_менеджера_3 = темп_менеджер
	}
}

boolean Деталь_нужна(Заявка_на_запасные_части заявка) {
	if (вероятность_нужна.next() == 1)
		return true
	else
		return false
}

operation Согласование_заявки_инженером() {
	relevant заявка = Заявка_на_запасные_части.all.filter[
		статус == Статус_заявки_на_запчасть.Обработана_менеджером].any
		
	def begin() {
		заявка.статус = Статус_заявки_на_запчасть.Согласовывается_инженером
	}
	def duration() {
		return время_согласования_заказа.next()
	}
	def end() {
		if (Деталь_нужна(заявка)) {
			if (заявка.срок_поставки == 0) {
				заявка.статус = Статус_заявки_на_запчасть.Выполнена
				заявка.инженер.количество_выполненных_заявок = заявка.инженер.количество_выполненных_заявок + 1
			} else {
				заявка.статус = Статус_заявки_на_запчасть.Ожидается_поставка
			}
		} else {
			заявка.статус = Статус_заявки_на_запчасть.Отменена
		}
	}
}

operation Доставка_заказных_деталей() {
	relevant курьер = Курьер.all.filter[состояние == Состояние_курьера.СВОБОДЕН].any
	relevant заявка = Заявка_на_запасные_части.all.filter[
		статус == Статус_заявки_на_запчасть.Ожидается_поставка].any
		
	def begin() {
		анимация.курьер.add(курьер.номер, true)
		курьер.состояние = Состояние_курьера.ЗАНЯТ
		заявка.статус = Статус_заявки_на_запчасть.Доставляется_курьером
	}
	def duration() {
		val double темп_курьер = PoissonExponential(60 * 24 / курьер.производительность)
		Рассчет_трудозатрат_курьеров(курьер, темп_курьер)
		return темп_курьер
	}
	def end() {
		анимация.курьер.add(курьер.номер, false)
		if (курьер.состояние == Состояние_курьера.ЗАНЯТ) {
			курьер.количество_обслуженных_заявок = курьер.количество_обслуженных_заявок + 1
			заявка.инженер.количество_выполненных_заявок = заявка.инженер.количество_выполненных_заявок + 1
			заявка.статус = Статус_заявки_на_запчасть.Выполнена
			курьер.состояние = Состояние_курьера.СВОБОДЕН
			анимация.курьер_количество_обслуженных_заявок.add(курьер.номер,
				анимация.курьер_количество_обслуженных_заявок.get(курьер.номер) + 1)
		}
		if (курьер.состояние == Состояние_курьера.БОЛЕН)
			заявка.статус = Статус_заявки_на_запчасть.Ожидается_поставка
	}
}

void Рассчет_трудозатрат_курьеров(Курьер курьер, double темп_курьер) {
	if (курьер.номер == 0) {
		статистика.количество_работ_курьер_1 = статистика.количество_работ_курьер_1 + 1
		статистика.полная_работа_курьера_1 = статистика.полная_работа_курьера_1 + темп_курьер
		if (темп_курьер < статистика.минимальная_работа_курьера_1)
			статистика.минимальная_работа_курьера_1 = темп_курьер
		if (темп_курьер > статистика.максимальная_работа_курьера_1)
			статистика.максимальная_работа_курьера_1 = темп_курьер
	} else if (курьер.номер == 1) {
		статистика.количество_работ_курьер_2 = статистика.количество_работ_курьер_2 + 1
		статистика.полная_работа_курьера_2 = статистика.полная_работа_курьера_2 + темп_курьер
		if (темп_курьер < статистика.минимальная_работа_курьера_2)
			статистика.минимальная_работа_курьера_2 = темп_курьер
		if (темп_курьер > статистика.максимальная_работа_курьера_2)
			статистика.максимальная_работа_курьера_2 = темп_курьер
	}
}

rule Отгрузка_детали_инженеру() {
	relevant заявка = Заявка_на_запасные_части.all.filter[
		статус == Статус_заявки_на_запчасть.Выполнена].any
		
	def execute() {
		статистика.количество_обслуженных_заявок = статистика.количество_обслуженных_заявок + 1
		заявка.erase()
	}
}

rule Отмена_заказа() {
	relevant заявка = Заявка_на_запасные_части.all.filter[
		статус == Статус_заявки_на_запчасть.Отменена].any
		
	def execute() {
		заявка.erase()
		статистика.количество_отмененных_заявок = статистика.количество_отмененных_заявок + 1
	}
}

logic Model {
	activity обработка_заявки_менеджером = new Activity(Обработка_заявки_менеджером.create())
	activity согласование_заявки_инженером = new Activity(Согласование_заявки_инженером.create())
	activity доставка_заказных_деталей = new Activity(Доставка_заказных_деталей.create())
	activity отгрузка_детали_инженеру = new Activity(Отгрузка_детали_инженеру.create())
	activity отмена_заказа = new Activity(Отмена_заказа.create())
	activity выздоровление_менеджера = new Activity(Выздоровление_менеджера.create())
	activity выздоровление_курьера = new Activity(Выздоровление_курьера.create())
}

result количество_заявок_инженер_1 = Result.create([инженер_1.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_2 = Result.create([инженер_2.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_3 = Result.create([инженер_3.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_4 = Result.create([инженер_4.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_5 = Result.create([инженер_5.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_6 = Result.create([инженер_6.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_7 = Result.create([инженер_7.количество_выполненных_заявок],
	new LastValueStatistics())
result количество_заявок_инженер_8 = Result.create([инженер_8.количество_выполненных_заявок],
	new LastValueStatistics())

result количество_заявок_менеджер_1 = Result.create([менеджер_1.количество_обслуженных_заявок],
	new LastValueStatistics())
result количество_заявок_менеджер_2 = Result.create([менеджер_2.количество_обслуженных_заявок],
	new LastValueStatistics())
result количество_заявок_менеджер_3 = Result.create([менеджер_3.количество_обслуженных_заявок],
	new LastValueStatistics())

result количество_заявок_на_базовые = Result.create([статистика.количество_заявок_на_базовые],
	new LastValueStatistics())
result количество_заявок_на_заказные = Result.create([статистика.количество_заявок_на_заказные],
	new LastValueStatistics())
result количество_заявок_обслуженных = Result.create([статистика.количество_обслуженных_заявок],
	new LastValueStatistics())
result количество_отмененных_заявок = Result.create([статистика.количество_отмененных_заявок],
	new LastValueStatistics())

result количество_заявок_курьер_1 = Result.create([курьер_1.количество_обслуженных_заявок], 
	new LastValueStatistics())
result количество_заявок_курьер_2 = Result.create([курьер_2.количество_обслуженных_заявок], 
	new LastValueStatistics())

result максимарьная_работа_менеджера_1 = Result.create([статистика.максимальная_работа_менеджера_1],
	new LastValueStatistics())
result максимарьная_работа_менеджера_2 = Result.create([статистика.максимальная_работа_менеджера_2],
	new LastValueStatistics())
result максимарьная_работа_менеджера_3 = Result.create([статистика.максимальная_работа_менеджера_3],
	new LastValueStatistics())

result минимальная_работа_менеджера_1 = Result.create([статистика.минимальная_работа_менеджера_1],
	new LastValueStatistics())
result минимальная_работа_менеджера_2 = Result.create([статистика.минимальная_работа_менеджера_2],
	new LastValueStatistics())
result минимальная_работа_менеджера_3 = Result.create([статистика.минимальная_работа_менеджера_3],
	new LastValueStatistics())

result полная_работа_менеджера_1 = Result.create([статистика.полная_работа_менеджера_1],
	new LastValueStatistics())
result полная_работа_менеджера_2 = Result.create([статистика.полная_работа_менеджера_2],
	new LastValueStatistics())
result полная_работа_менеджера_3 = Result.create([статистика.полная_работа_менеджера_3],
	new LastValueStatistics())

result количество_работ_менеджера_1 = Result.create([статистика.количество_работ_менеджер_1],
	new LastValueStatistics())
result количество_работ_менеджера_2 = Result.create([статистика.количество_работ_менеджер_2],
	new LastValueStatistics())
result количество_работ_менеджера_3 = Result.create([статистика.количество_работ_менеджер_3],
	new LastValueStatistics())

result максимарьная_работа_курьера_1 = Result.create([статистика.максимальная_работа_курьера_1],
	new LastValueStatistics())
result максимарьная_работа_курьера_2 = Result.create([статистика.максимальная_работа_курьера_2],
	new LastValueStatistics())

result минимальная_работа_курьера_1 = Result.create([статистика.минимальная_работа_курьера_1],
	new LastValueStatistics())
result минимальная_работа_курьера_2 = Result.create([статистика.минимальная_работа_курьера_2],
	new LastValueStatistics())

result полная_работа_курьера_1 = Result.create([статистика.полная_работа_курьера_1],
	new LastValueStatistics())
result полная_работа_курьера_2 = Result.create([статистика.полная_работа_курьера_2],
	new LastValueStatistics())

result количество_работ_курьера_1 = Result.create([статистика.количество_работ_курьер_1],
	new LastValueStatistics())
result количество_работ_курьера_2 = Result.create([статистика.количество_работ_курьер_2],
	new LastValueStatistics())

constant width = 40
constant height = 40

frame Frame {
	def draw() {
		for (инженер : Инженер.all) {
			drawText("инженер_" + Integer.toString(инженер.номер), 60, 60 * инженер.номер)
			drawLine(100, 30 + 60 * инженер.номер, 150, 30 + 60 * инженер.номер)
			if (инженер.номер >= 1)
				drawLine(150, 30 + 60 * (инженер.номер - 1), 150, 30 + 60 * инженер.номер)
			drawRectangle(60, 15 + 60 * инженер.номер, width, height)
			if (анимация.инженер.get(инженер.номер).equals(true) &&
				currentTime < (анимация.инженер_время_выдачи_заявки.get(инженер.номер) + 25))
				drawRectangle(60, 15 + 60 * инженер.номер, width, height, RaoColor.GREEN, RaoColor.BLACK)
			else if (анимация.инженер.get(инженер.номер).equals(true) &&
				currentTime > (анимация.инженер_время_выдачи_заявки.get(инженер.номер) + 25))
				анимация.инженер.add(инженер.номер, false)
			drawText(анимация.инженер_количество_созданных_заявок.get(инженер.номер), 60, 15 + 60 * инженер.номер)
		}

		for (менеджер : Менеджер.all) {
			drawText("менеджер_" + Integer.toString(менеджер.номер), 200, 150 + 60 * менеджер.номер)
			if (менеджер.номер >= 1)
				drawLine(285, 185 + 60 * (менеджер.номер - 1), 285, 185 + 60 * менеджер.номер)
			drawRectangle(200, 165 + 60 * менеджер.номер, width, height)
			drawLine(240, 185 + 60 * менеджер.номер, 285, 185 + 60 * менеджер.номер)
			drawLine(150, 185 + 60 * менеджер.номер, 200, 185 + 60 * менеджер.номер)
			if (анимация.менеджер.get(менеджер.номер).equals(true))
				drawRectangle(200, 165 + 60 * менеджер.номер, width, height, RaoColor.GREEN, RaoColor.BLACK)
			drawText(анимация.менеджер_количество_обслуженных_заявок.get(менеджер.номер), 200, 165 + 60 * менеджер.номер)
		}
		
		for (курьер : Курьер.all) {
			drawText("курьер_" + Integer.toString(курьер.номер), 300, 180 + 60 * курьер.номер)
			if (курьер.номер >= 1)
				drawLine(360, 215 + 60 * (курьер.номер - 1), 360, 215 + 60 * курьер.номер)
			drawRectangle(300, 195 + 60 * курьер.номер, width, height)
			drawLine(340, 215 + 60 * курьер.номер, 360, 215 + 60 * курьер.номер)
			drawLine(285, 215 + 60 * курьер.номер, 300, 215 + 60 * курьер.номер)
			if (анимация.курьер.get(курьер.номер).equals(true))
				drawRectangle(300, 195 + 60 * курьер.номер, width, height, RaoColor.GREEN, RaoColor.BLACK)
			drawText(анимация.курьер_количество_обслуженных_заявок.get(курьер.номер), 300, 195 + 60 * курьер.номер)
		}

		drawLine(360, 245, 400, 245)
		drawText("склад", 400, 210)
		drawRectangle(400, 225, width, height)
		drawText(статистика.количество_обслуженных_заявок, 400, 225)
	}
}
