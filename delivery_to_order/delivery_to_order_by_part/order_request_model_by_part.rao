import domain.LocalDateAttributeConverter
import domain.Order
import domain.Part
import domain.PartRequest
import domain.QOrder
import domain.QPart
import domain.QPartRequest

import ru.bmstu.rk9.rao.lib.persistence.SqlDataProvider

import java.io.PrintWriter
import java.time.temporal.ChronoUnit
import java.time.LocalDate
import java.util.ArrayList
import java.util.TreeMap
import java.util.stream.Collectors
import java.util.Map
import java.util.HashMap
import java.util.DoubleSummaryStatistics
import java.util.IntSummaryStatistics
import util.OkFailPair

/* Connection data */
constant driver = "com.mysql.jdbc.Driver"
constant url = "jdbc:mysql://localhost:3306/corpterminal?zeroDateTimeBehavior=convertToNull"
constant username = "Observer"
constant password = "CY73-YVRE-3FT2"
/* Data containers */
constant failDuration = new ArrayList<Double>
constant successfulDuration = new ArrayList<Double>
constant failPrices = new ArrayList<Long>
constant successfulPrices = new ArrayList<Long>
constant deliveries = new ArrayList<Integer>
constant writer = new PrintWriter("order_request_model_profit.csv", "UTF-8")
constant writerWarehouse = new PrintWriter("order_request_model_warehouse.csv", "UTF-8")
constant writerProfitWarehouse = new PrintWriter("order_request_model_profit-warehouse.csv", "UTF-8")
/* Simulation constants */
constant fillDateForwardMin = 1
constant fillDateForwardMax = 10
constant fillDateForwardStep = 1
constant fillCoeffMin = 0.1
constant fillCoeffMax = 1
constant fillCoeffStep = 0.05
constant startSimulation = "2017-01-01"
constant finishSimulation = "2018-01-01"
constant initialBalance = 1_000_000
constant successfulDurationMaxDays = 0
constant seed = 1234567L
constant logLevel = Level.INFO
constant extendedResult = true

enum OrderResult {OK, FAIL, LATE}
enum OrderState {REQUESTED, PROCESSING, FINISHED}
enum Level {DEBUG, INFO}

dataprovider data = new SqlDataProvider(driver, url, username, password, Part, Order, PartRequest, LocalDateAttributeConverter)

type OrderStats {
	long balance
	double fillCoeff
	int fillDateForward
	long warehouseInitialCosts
	Map<String, Double> partGetPossibility
	Map<String, Double> partDeliveryWaitPossibility
	Map<String, Double> partNoWaitPossibility
	Uniform randomDeviveryOk
	IntSummaryStatistics eduSuccess
}

resource orderStats = OrderStats.create(initialBalance, 1, 6, 0, new HashMap, new HashMap, new HashMap, null,
	new IntSummaryStatistics)

long getModificationInterval(Order order) {
	val start = order.dateOfCreation
	val end = order.dateOfProcessing
	val interval = start.until(end, ChronoUnit.DAYS)
	if (interval < 0)
		throw new IllegalStateException("getModificationInterval " + interval)
	return interval
}

long getRealizationInterval(Order order) {
	val start = order.dateOfCreation
	val end = order.dateOfRealization
	val interval = start.until(end, ChronoUnit.DAYS)
	if (interval < 0)
		throw new IllegalStateException("getRealizationInterval " + interval)
	return interval
}

long getDeliveryInterval(PartRequest partRequest) {
	val start = partRequest.order.dateOfCreation
	val end = partRequest.dateOfDelivery
	val interval = start.until(end, ChronoUnit.DAYS)
	return interval
}

long interval(PartRequest partRequest) {
	val order = partRequest.order
	if (partRequest.dateOfDelivery !== null && getDeliveryInterval(partRequest) >= 0)
		return getDeliveryInterval(partRequest)
	// Детали с отрицательной длительностью считаем уже на складе
	else if (partRequest.dateOfDelivery !== null)
		return 0
	else if (order.dateOfRealization !== null)
		return getRealizationInterval(order)
	return getModificationInterval(order)
}

long calculatePrice(OrderType orderType){
	val order = orderType.original
	var sum = 0L
	for (partRequest : order.requestedParts){
		val part = partRequest.part
		var sellprice = 0
		var count = partRequest.count
		if(part.sellingprice > 0)
			sellprice = part.sellingprice
		if(sellprice == 0 && part.clientprice > 0)
			sellprice = part.clientprice
		if(sellprice == 0 && part.retailprice > 0)
			sellprice = part.retailprice
		debug(String.format("Деталь стоит %d, %s", sellprice * count, partRequest))
		sum += sellprice * count
	}
	return sum
}

boolean canTakePartsFromWarehouse(PartRequest request) {
	return request.part.stocked >= request.count;
}

void takePartsForOrder(Order order) {
	for (PartRequest request : order.requestedParts) {
		takeParts(request)
	}
}

void takeParts(PartRequest request) {
	val part = request.part
	if (canTakePartsFromWarehouse(request)) {
		part.stocked -= request.count
	} else {
		val requiredNowParts = request.count - part.stocked
		// проверка будущей потребности, берем +1 месяц
		val startDate = request.order.dateOfCreation
		val endDate = startDate.plusMonths(1)
		val query = data.<PartRequest>getQuery
		val qpartRequest = QPartRequest.partRequest
		val partList = query.from(qpartRequest).where(
			qpartRequest.order.dateOfCreation.between(startDate, endDate).and(qpartRequest.eq(request))).fetch
			
		var futureRequirementCount = 0
		for(row : partList)
			futureRequirementCount += row.count
		
		var deliveryPrice = 0
		var supplyAmount = 0
		if (futureRequirementCount == 1) {
			// вызываем курьера, за 700 рублей
			supplyAmount = 1
			deliveryPrice = 700
		} else {
			// > 1, дозаказываем детали на 6 недель
			val endDateForDelivery = startDate.plusWeeks(orderStats.fillDateForward)
			val query2 = data.<PartRequest>getQuery
			val partListToAdd = query2.from(qpartRequest).where(
				qpartRequest.order.dateOfCreation.between(startDate, endDateForDelivery).and(
					qpartRequest.part.eq(part))).fetch

			for (row : partListToAdd)
				supplyAmount += row.count

			supplyAmount = Math.round(supplyAmount * orderStats.fillCoeff) as int
			if(supplyAmount < supplyAmount)
				supplyAmount = requiredNowParts

			deliveryPrice = 1500
		}
		val price = part.purchaseprice * supplyAmount + deliveryPrice
		debugIf(price > 300_000, String.format("Доставка за %d р. %d деталей \tБаланс: %d %s", price, supplyAmount, orderStats.balance, request))
		deliveries.add(price)
		orderStats.balance = orderStats.balance - price
		part.stocked += supplyAmount - request.count
	}
}

/* Model data */
type OrderType {
	Order original
	OrderState state
	OrderResult resulted
	double creationTime
	double emptyProcessDuration
}

/* Order logic */
event Payments() {
	orderStats.balance = orderStats.balance - 200_000
}

event OrderReceived(Order order) {
	if (order.requestedParts.isEmpty && order.dateOfRealization === null && order.dateOfProcessing === null) {
		return
	}
	if (order.solutionName == "ЗаявкаВыданаВРезерв") {
		return
	}
	OrderType.create(order, OrderState.REQUESTED, OrderResult.OK, currentTime, 0)
}

operation OrderProcessing() {
	relevant order = OrderType.accessible.filter[state == OrderState.REQUESTED].any

	def begin() {
		order.state = OrderState.PROCESSING
	}

	def duration() {
		val parts = order.original.requestedParts
		var duration = 0L
		for (partRequest : parts)
			if (!canTakePartsFromWarehouse(partRequest)) {
				duration = Math.max(duration, 1)
				duration = Math.max(duration, interval(partRequest))
			}
		
		val orderOkStat = new DoubleSummaryStatistics
		for (partRequest : parts) {
			val partId = partRequest.part.id
			// val getPossibility = orderStats.partGetPossibility.get(partId)
			val waitPossibilityStored = orderStats.partNoWaitPossibility.getOrDefault(partId, orderStats.partGetPossibility.get(partId))
			val waitPossibilityDeliver = orderStats.partDeliveryWaitPossibility.getOrDefault(partId, orderStats.partGetPossibility.get(partId))
			val possibility = if (duration == 0) waitPossibilityStored else waitPossibilityDeliver;
			orderOkStat.accept(possibility);
		}
		if (orderOkStat.getAverage < orderStats.randomDeviveryOk.next)
			order.resulted = OrderResult.FAIL
		else
			takePartsForOrder(order.original)
		return duration
	}

	def end() {
		order.state = OrderState.FINISHED
	}
}

rule UtilizeOrder() {
	relevant order = OrderType.accessible.filter[state == OrderState.FINISHED].any

	def execute() {
		order.erase()
		val price = calculatePrice(order)
		val duration = currentTime - order.creationTime
		switch (order.resulted) {
			case OK: {
				orderStats.balance = orderStats.balance + price
				successfulDuration.add(duration)
				successfulPrices.add(price)
			}
			default: {
				failDuration.add(duration)
				failPrices.add(price)
			}
		}
		orderStats.eduSuccess.accept(if ((order.original.dateOfRealization !== null) == (order.resulted === OrderResult.OK)) 0 else 1)
		debug(String.format("Заказ обработан %d р. %s\t\tБаланс: %d %s", price, order.resulted, orderStats.balance, order.original))
	}
}

logic Model {
	activity orderProcessing = new Activity(OrderProcessing.create())
	activity utilizeOrder = new Activity(UtilizeOrder.create())
}

def experiments() {
	init
	
	/* Gist creation */
	val startDate = LocalDate.parse(startSimulation)
	val endDate = LocalDate.parse(finishSimulation)
	val qOrder = QOrder.order

	val _query = data.<Order>getQuery
	val _orderList = _query.from(qOrder).where(qOrder.dateOfCreation.between(startDate, endDate)).orderBy(
		qOrder.id.asc).fetch

	val partGetPossibility = new TreeMap<String, OkFailPair>
	val partDeliveryWaitPossibility = new TreeMap<String, OkFailPair>
	val partNoWaitPossibility = new TreeMap<String, OkFailPair>
	for (order : _orderList) {
		if (order.requestedParts.isEmpty && order.dateOfRealization === null && order.dateOfProcessing === null) {
		}
		if (order.solutionName == "ЗаявкаВыданаВРезерв") {
		} else {
			val ok = order.dateOfRealization !== null
			for (request : order.requestedParts) {
				val part = request.part
				val interval = interval(request)
				partGetPossibility.compute(part.id, [k, v|(if(v === null) new OkFailPair else v).add(ok)])
				if(interval > 0)
					partDeliveryWaitPossibility.compute(part.id, [k, v|(if(v === null) new OkFailPair else v).add(ok)])
				else
					partNoWaitPossibility.compute(part.id, [k, v|(if(v === null) new OkFailPair else v).add(ok)])
			}
		}
	}
	orderStats.partGetPossibility = partGetPossibility.entrySet.stream.map([ e |
		e.key -> e.value.possibility
	]).collect(Collectors.<Pair<String, Double>, String, Double>toMap([k|k.key], [v|v.value]))
	orderStats.partDeliveryWaitPossibility = partDeliveryWaitPossibility.entrySet.stream.map([ e |
		e.key -> e.value.possibility
	]).collect(Collectors.<Pair<String, Double>, String, Double>toMap([k|k.key], [v|v.value]))
	orderStats.partNoWaitPossibility = partNoWaitPossibility.entrySet.stream.map([ e |
		e.key -> e.value.possibility
	]).collect(Collectors.<Pair<String, Double>, String, Double>toMap([k|k.key], [v|v.value]))
	orderStats.warehouseInitialCosts = sellWarehouse
	info("Part presence success probability: " + orderStats.partGetPossibility.toString)
	info("Part delivery wait success probability: " + orderStats.partDeliveryWaitPossibility.toString)
	info("Part instant sell success probability: " + orderStats.partNoWaitPossibility.toString)
	info("Warehouse stored price during start: " + orderStats.warehouseInitialCosts)
	
	var countExperiment = 1
	for (orderStats.fillDateForward = fillDateForwardMin; orderStats.fillDateForward <
			fillDateForwardMax; orderStats.fillDateForward = orderStats.fillDateForward + fillDateForwardStep) {
		orderStats.fillCoeff = fillCoeffMin
		do {
			info(
				String.format("Эксперимент %d. Коэффициент докупки %f. Недель наперед %d", countExperiment++,
					orderStats.fillCoeff, orderStats.fillDateForward))
			createSimulationEvents
			start
			orderStats.fillCoeff = orderStats.fillCoeff + fillCoeffStep
		} while (orderStats.fillCoeff < fillCoeffMax)
	}
	writer.close
	writerWarehouse.close
	writerProfitWarehouse.close
}

def terminateCondition() {
    return orderStats.balance <= 0
}

void createSimulationEvents() {
	failDuration.clear
	successfulDuration.clear
	failPrices.clear
	successfulPrices.clear
	deliveries.clear
	data.clear
	orderStats.balance = initialBalance
	orderStats.randomDeviveryOk = new Uniform(seed, 0, 1)

	val startDate = LocalDate.parse(startSimulation)
	val endDate = LocalDate.parse(finishSimulation)
	val qOrder = QOrder.order

	val query = data.<Order>getQuery
	val orderList = query.from(qOrder).where(qOrder.dateOfCreation.between(startDate, endDate)).orderBy(qOrder.id.asc).
		fetch
	for (order : orderList) {
		OrderReceived.plan(order.getEpochDayOfCreation(), order)
	}

	var payDate = startDate
	while (payDate.isBefore(endDate)) {
		Payments.plan(payDate.toEpochDay())
		payDate = payDate.plusMonths(1)
	}
}

long sellWarehouse() {
	val qpart = QPart.part
	val query = data.<Part>getQuery
	val partList = query.from(qpart).fetch
	var price = 0L
	for (part : partList) {
		price += part.purchaseprice * part.stocked
	}
	return price
}

def finish() {
	val successes = successfulDuration.size
	val fails = failDuration.size
	val percentage = if((successes + fails) == 0) 0 else successes * 100 /
			(successes + fails)
	infoIf(extendedResult,
		String.format("Result: \t\tOrders: %d/%d Successful percentage: %d%%", successes,
			successes + fails,
			percentage))
	val failResults = failDuration.stream.mapToDouble([f | f]).summaryStatistics
	infoIf(extendedResult,
		String.format("Fail duration: \tAverage: %f\tMax: %f\tMin: %f", failResults.getAverage, failResults.getMax,
			failResults.getMin))
	val successfulResults = successfulDuration.stream.mapToDouble([f | f]).summaryStatistics
	infoIf(extendedResult,
		String.format("Ok duration: \tAverage: %f\tMax: %f\tMin: %f", successfulResults.getAverage,
			successfulResults.getMax, successfulResults.
				getMin))
	val failPriceResults = failPrices.stream.mapToLong([f | f]).summaryStatistics
	infoIf(extendedResult,
		String.format("Fail price: \tAverage: %f\tMax: %d\tMin: %d", failPriceResults.getAverage,
			failPriceResults.getMax,
			failPriceResults.
				getMin))
	val successPriceResults = successfulPrices.stream.mapToLong([f | f]).summaryStatistics
	infoIf(extendedResult,
		String.format("Ok prive: \t\tAverage: %f\tMax: %d\tMin: %d", successPriceResults.getAverage,
			successPriceResults.getMax, successPriceResults.getMin))
	val deliveryResults = deliveries.stream.mapToInt([f | f]).summaryStatistics
	infoIf(extendedResult,
		String.format("Deliveries: \t\tSum: %d", deliveryResults.getSum))
	
	
	val selledWarehouse = sellWarehouse - orderStats.warehouseInitialCosts
	val profit = orderStats.balance - initialBalance
	val simpleData = String.format("%d;%f;%d", orderStats.fillDateForward, orderStats.fillCoeff, profit)
	val simpleWarehouseData = String.format("%d;%f;%d", orderStats.fillDateForward, orderStats.fillCoeff, selledWarehouse)
	val simpleProfitWarehouseData = String.format("%d;%f;%d", orderStats.fillDateForward, orderStats.fillCoeff, profit + selledWarehouse)
	infoIf(!extendedResult, simpleData)
	infoIf(!extendedResult, simpleWarehouseData)
	infoIf(!extendedResult, simpleProfitWarehouseData)
	infoIf(extendedResult,
		String.format("Profit: %d \tSelled warehouse: %d \tTotal profit: %d",
			profit, selledWarehouse, profit + selledWarehouse))
	infoIf(extendedResult, String.format("Education success: %f", orderStats.eduSuccess.getAverage))
	writer.println(simpleData)
	writerWarehouse.println(simpleWarehouseData)
	writerProfitWarehouse.println(simpleProfitWarehouseData)
}

void infoIf(boolean condition, String text){
	if (condition)
		info(text)
}

void info(String text){
	if (logLevel.ordinal <= Level.INFO.ordinal)
		log(Level.INFO + "\t" + text)
}

void debugIf(boolean condition, String text){
	if (condition)
		debug(text)
}

void debug(String text){
	if (logLevel.ordinal <= Level.DEBUG.ordinal)
		log(Level.DEBUG + "\t" + text)
}
