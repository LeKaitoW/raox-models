import java.util.ArrayList
import ru.bmstu.rk9.rao.lib.persistence.SqlDataProvider

dataprovider corpTerminal = new SqlDataProvider("jdbc:mysql://mikhailmineev.ru:3306/corpterminal","jpademo","5xYB2e6T5Jo7ajA")
	.addLoadedClasses(Part)
	
/*dataprovider corpTerminal = new SqlDataProvider("jdbc:mysql://localhost:3306/corpterminal","observer","compaq")
	.addLoadedClasses(Part)*/

//@Table(name = "catalogue") 
//@Entity
dataentity Part{
	//@Id
	String id
	String manufacturer
	//@Column(name="name") 
	//String name //name is reserved word
	String path
	int retailprice
	int purchaseprice
	int sellingprice
	int clientprice
	int purtnerprice
	int stocked
	int reserved
	String store
	double catalogueprice
	//@OneToMany
}

constant deliveryPrice = 5_000_00 // В копейках
constant deliveryAmount = 200 // В штуках
constant itemPrice = 1_000_00 // В копейках
constant defaultDeliveryTime = 3 // Время ожидания в днях
constant terminateTime = 600 // Время остановки
sequence itemReceivedInterval = new Exponential(123456789, 1 / 30.0)

//datasource 

type Warehouse {
	ArrayList<Item> items
}

type ItemType {
	int deliveryTime
}

type Item {
	int price
	int totalPrice
	ItemType itemType;
}

resource warehouse = Warehouse.create(new ArrayList)
resource itemType1 = ItemType.create(defaultDeliveryTime)

event ItemReceived() {
	var item_ = Item.create(itemPrice, 0, itemType1)
	calculatePrice(item_)
	warehouse.items.add(item_)
	ItemReceived.plan(currentTime + itemReceivedInterval.next())
}

def init() {
	// JPAQuery<?> query = new JPAQuery<Void>(em);
	var em =corpTerminal.getEntityManager();
	var cb = em.getCriteriaBuilder();
	var select = cb.createQuery(Part);
	select.from(Part);
	// select.where( cb.equal(root.get("id").get("userId"), "id");
	for(part : em.createQuery(select).getResultList()){
		log(part.toString())
	}
	ItemReceived.plan(itemReceivedInterval.next())
}

def terminateCondition() {
	return currentTime >= terminateTime
}

void calculatePrice(Item item){
	item.totalPrice = deliveryPrice / deliveryAmount + item.price
}

