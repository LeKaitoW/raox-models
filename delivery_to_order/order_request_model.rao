import java.util.ArrayList

constant terminateTime = 600 // Время остановки минуты?
constant allowedDeliveryWaitPeriod = 4 // Допустимое время ожидания заказа, дни
constant defaultDeliveryTime = 3 // Время ожидания в днях
sequence orderRequestReceivedInterval = new Exponential(123456789, 1 / 30.0)

type Warehouse {
	ArrayList<Item> items
}

type ItemType {
	int deliveryTime
}

type OrderRequest {
	ArrayList<Item> items
}

type Item {
	int price
	int totalPrice
	ItemType itemType;
}

resource warehouse = Warehouse.create(new ArrayList)
resource itemType1 = ItemType.create(defaultDeliveryTime)

resource warehouse_ = Warehouse.create(new ArrayList)

event OrderRequestReceived() {
	// Создание образца запроса
	var orderRequest_ = OrderRequest.create(new ArrayList)
	orderRequest_.items.add(Item.create(0, 0, itemType1))
	// Опрос склада по запросу
	for (Item item_ : orderRequest_.items) {
		if (warehouse.items.contains(item_)) {
			// TODO Убираем деталь из склада и отправляем
			warehouse.items.remove(item_)
		} else if (item_.itemType.deliveryTime < allowedDeliveryWaitPeriod) {
			// TODO Готов ждать три дня, заказываем деталь
		} else {
			// TODO Не готов ждать, заказ уходит
		}
	}
	OrderRequestReceived.plan(currentTime + orderRequestReceivedInterval.next())
}

def init() {
	OrderRequestReceived.plan(orderRequestReceivedInterval.next())
}

def terminateCondition() {
	return currentTime >= terminateTime
}

