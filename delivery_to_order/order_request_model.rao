import com.querydsl.jpa.impl.JPAQuery
import domain.Order
import ru.bmstu.rk9.rao.lib.persistence.SqlDataProvider
import domain.PartRequest
import java.util.Iterator
import domain.Part
import domain.QOrder

constant terminateTime = 6000 // Время остановки минуты?
constant allowedDeliveryWaitPeriod = 4 // Допустимое время ожидания заказа, дни
constant defaultDeliveryTime = 3 // Время ожидания в днях
sequence orderRequestReceivedInterval = new Exponential(123456789, 1 / 30.0)

enum State {REQUESTERD, IN_TRANSIT, ARRIVED}

dataprovider corpTerminal = new SqlDataProvider(
	"com.mysql.jdbc.Driver",
	"jdbc:mysql://mikhailmineev.ru:3306/corpterminal?zeroDateTimeBehavior=convertToNull",
	"jpademo",
	"5xYB2e6T5Jo7ajA",
	Part,
	Order,
	PartRequest)
	
/*dataprovider corpTerminal = new SqlDataProvider("jdbc:mysql://localhost:3306/corpterminal","observer","compaq")
	.addEntity("Part")*/

type Orderset {
	Iterator<Order> orders
}

type WPartRequest {
	PartRequest partRequest
	State state
}

resource orderset = Orderset.create(null)

event OrderReceived() {
	// Создание образца запроса
	var order = orderset.orders.next()
	for (partRequest : order.requestedParts) {
		WPartRequest.create(partRequest, State.REQUESTERD)
	}
	
	OrderReceived.plan(currentTime + orderRequestReceivedInterval.next())
}

operation PartProcessing() {
    relevant partRequest_ = WPartRequest.accessible.filter[state == State.REQUESTERD].any

    def begin() {
        partRequest_.state = State.IN_TRANSIT
    }

    def duration() {
        return defaultDeliveryTime
    }

    def end() {
        partRequest_.state = State.ARRIVED
    }
}

logic Model {
    activity partProcessing = new Activity(PartProcessing.create())
    activity utilizeProcessed = new Activity(UtilizeProcessed.create())
}

rule UtilizeProcessed() {
    relevant partRequest_ = WPartRequest.accessible.filter[state == State.ARRIVED].any

    def execute() {
        partRequest_.erase()
    }
}

def init() {
	var query = new JPAQuery<Order>(corpTerminal.getEntityManager())
	var order = QOrder.order
	var orders = query.from(order).fetch().iterator()
	orderset.orders = orders
	OrderReceived.plan(orderRequestReceivedInterval.next())
}

def terminateCondition() {
	return currentTime >= terminateTime || !orderset.orders.hasNext()
}
