constant интервал_поступления = 20.0
constant продолжительность_работы_менеджера = 100.0
constant продолжительность_доставки_деталей = 100.0
constant продолжительность_работы_инженера_с_заказными_заявками = 125.0
constant продолжительность_работы_инженера_с_базовымии_заявками = 100.0
constant время_выдачи_заказа = 10.0

sequence экспоненциальный = new Exponential(123456789)
sequence newCallInterval = new Normal(123456789, 0, 2)

enum Состояние_менеджера {
	СВОБОДЕН, ЗАНЯТ
}

type Менеджеры {
	int номер
	Состояние_менеджера состояние
	int количество_обслуженных_заявок
}

resource менеджер_1 = Менеджеры.create(1, Состояние_менеджера.СВОБОДЕН, 0)
resource менеджер_2 = Менеджеры.create(2, Состояние_менеджера.СВОБОДЕН, 0)
resource менеджер_3 = Менеджеры.create(3, Состояние_менеджера.СВОБОДЕН, 0)

enum Состояние_курьера {
	ВПУТИ, НАМЕСТЕ
}

type Курьеры {
	int номер
	Состояние_курьера состояние
	int количество_обслуженных_заявок
}

resource курьер_1 = Курьеры.create(1, Состояние_курьера.НАМЕСТЕ, 0)
resource курьер_2 = Курьеры.create(2, Состояние_курьера.НАМЕСТЕ, 0)

enum Состояние_инженера {
	СВОБОДЕН, ЗАНЯТ
}

type Инженеры {
	int номер
	Состояние_инженера состояние
	int количество_обслуженных_заявок
}

resource инженер_1 = Инженеры.create(1, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_2 = Инженеры.create(2, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_3 = Инженеры.create(3, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_4 = Инженеры.create(4, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_5 = Инженеры.create(5, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_6 = Инженеры.create(6, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_7 = Инженеры.create(7, Состояние_инженера.СВОБОДЕН, 0)
resource инженер_8 = Инженеры.create(8, Состояние_инженера.СВОБОДЕН, 0)

enum Детали {
	БАЗОВЫЕ, ЗАКАЗНЫЕ, НЕОПРЕДЕЛЕННЫЕ
}

enum Состояние_заказа {
	ПРИБЫЛ, У_МЕНЕДЖЕРА, ОБРАБОТАН_МЕНЕДЖЕРОМ,У_ИНЖЕНЕРА, ОБРАБОТАН_ИНЖЕНЕРОМ, ДОСТАВКА, ОТДАН_ЗАКАЗЧИКУ
}

enum Состояние_Доставки {
	ДЕТАЛИ_НЕДОСТАВЛЕНЫ, ДЕТАЛИ_ДОСТАВЛЕНЫ, ДОСТАВКА_НЕ_НУЖНА, ДЕТАЛИ_ДОСТАВЛЮТСЯ, НЕОПРЕДЕЛЕННО
}

type Заказы {
	int номер
	Состояние_заказа состояние
	Детали детали
	Состояние_Доставки состояние_доставки
}

type Статистика {
	int количество_заявок_на_базовые
	int количество_заявок_на_заказные
	int количество_обслуженных_заявок
}

resource статистика = Статистика.create(0, 0, 0)
event Поступление_заготовки(int i) {
    Заказы.create(i,Состояние_заказа.ПРИБЫЛ, Детали.НЕОПРЕДЕЛЕННЫЕ, Состояние_Доставки.НЕОПРЕДЕЛЕННО)
    i+=1
    Поступление_заготовки.plan(currentTime + интервал_поступления,i)
}

def init() {
	var i = 0
    Поступление_заготовки.plan(currentTime + интервал_поступления,i)
}
def terminateCondition() {
	return currentTime > 1500
}
operation Прием_Заказа_Менеджером(){
	relevant менеджер = Менеджеры.all.filter[состояние == Состояние_менеджера.СВОБОДЕН].any
	relevant заказ = Заказы.all.filter[состояние ==Состояние_заказа.ПРИБЫЛ].any
	def begin(){
		менеджер.состояние = Состояние_менеджера.ЗАНЯТ
		заказ.состояние = Состояние_заказа.У_МЕНЕДЖЕРА			
	}
	def duration(){
		return продолжительность_работы_менеджера
	}
	def end(){
		менеджер.количество_обслуженных_заявок = менеджер.количество_обслуженных_заявок + 1
		менеджер.состояние = Состояние_менеджера.СВОБОДЕН
		заказ.состояние = Состояние_заказа.ОБРАБОТАН_МЕНЕДЖЕРОМ	
		if(mathRand()==1){
			заказ.детали = Детали.БАЗОВЫЕ
			заказ.состояние_доставки = Состояние_Доставки.ДОСТАВКА_НЕ_НУЖНА
			статистика.количество_заявок_на_базовые = статистика.количество_заявок_на_базовые+1
			}
		else{
			заказ.детали = Детали.ЗАКАЗНЫЕ
			заказ.состояние_доставки = Состояние_Доставки.ДЕТАЛИ_НЕДОСТАВЛЕНЫ
			статистика.количество_заявок_на_заказные = статистика.количество_заявок_на_заказные+1
		}
	}
}
int mathRand(){
	if(Math.random >0.5)
		return 1
	else 
		return 0
}
operation Доставка_заказных_деталей(){
	relevant курьер = Курьеры.all.filter[состояние == Состояние_курьера.НАМЕСТЕ].any
	relevant заказ = Заказы.all.filter[состояние == Состояние_заказа.ОБРАБОТАН_МЕНЕДЖЕРОМ && детали == Детали.ЗАКАЗНЫЕ && состояние_доставки == Состояние_Доставки.ДЕТАЛИ_НЕДОСТАВЛЕНЫ].any
	def begin(){
		курьер.состояние = Состояние_курьера.ВПУТИ
		заказ.состояние_доставки = Состояние_Доставки.ДЕТАЛИ_ДОСТАВЛЮТСЯ
	}
	def duration(){
		return продолжительность_доставки_деталей
	}
	def end(){
		курьер.количество_обслуженных_заявок = курьер.количество_обслуженных_заявок + 1
		заказ.состояние_доставки = Состояние_Доставки.ДЕТАЛИ_ДОСТАВЛЕНЫ
		курьер.состояние = Состояние_курьера.НАМЕСТЕ
	}
}

operation Обработка_заказных_заявок_инженером(){
	relevant инженер = Инженеры.all.filter[состояние == Состояние_инженера.СВОБОДЕН].any
	relevant заказ = Заказы.all.filter[состояние == Состояние_заказа.ОБРАБОТАН_МЕНЕДЖЕРОМ && детали == Детали.ЗАКАЗНЫЕ && состояние_доставки == Состояние_Доставки.ДЕТАЛИ_ДОСТАВЛЕНЫ].any
	def begin(){
		инженер.состояние = Состояние_инженера.ЗАНЯТ
		заказ.состояние = Состояние_заказа.У_ИНЖЕНЕРА
	}
	def duration(){
		return продолжительность_работы_инженера_с_заказными_заявками
	}
	def end(){
		заказ.состояние == Состояние_заказа.ОБРАБОТАН_ИНЖЕНЕРОМ
		инженер.состояние = Состояние_инженера.СВОБОДЕН
		инженер.количество_обслуженных_заявок = инженер.количество_обслуженных_заявок + 1
	}
}
operation Обработка_базовых_заявок_инженером(){
	relevant инженер = Инженеры.all.filter[состояние == Состояние_инженера.СВОБОДЕН].any
	relevant заказ = Заказы.all.filter[состояние == Состояние_заказа.ОБРАБОТАН_МЕНЕДЖЕРОМ && детали == Детали.БАЗОВЫЕ && состояние_доставки == Состояние_Доставки.ДОСТАВКА_НЕ_НУЖНА].any
	def begin(){
		инженер.состояние = Состояние_инженера.ЗАНЯТ
		заказ.состояние = Состояние_заказа.У_ИНЖЕНЕРА
	}
	def duration(){
		return продолжительность_работы_инженера_с_заказными_заявками
	}
	def end(){
		заказ.состояние = Состояние_заказа.ОБРАБОТАН_ИНЖЕНЕРОМ
		инженер.состояние = Состояние_инженера.СВОБОДЕН
		инженер.количество_обслуженных_заявок = инженер.количество_обслуженных_заявок + 1
	}
}

operation Выдача_заказа(){
	relevant заказ = Заказы.all.filter[состояние == Состояние_заказа.ОБРАБОТАН_ИНЖЕНЕРОМ].any
	def begin(){
		заказ.состояние = Состояние_заказа.ДОСТАВКА
	}
	def duration(){
		return время_выдачи_заказа
	}
	def end(){
		статистика.количество_обслуженных_заявок = статистика.количество_обслуженных_заявок + 1
		заказ.состояние = Состояние_заказа.ОТДАН_ЗАКАЗЧИКУ
	}
}
logic Model{
	activity прием_заказа_менеджером = new Activity(Прием_Заказа_Менеджером.create())
	activity доставка_заказных_деталей = new Activity(Доставка_заказных_деталей.create())
	activity обработка_заказных_заявок_инженером = new Activity(Обработка_заказных_заявок_инженером.create())
	activity обработка_базовых_заявок_инженером = new Activity(Обработка_базовых_заявок_инженером.create())
	activity выдача_заказ = new Activity(Выдача_заказа.create())
}
frame Frame {
	def init() {
		background = new Background(800, 600, RaoColor.WHITE)
	}
	def draw() {
		drawText('Время:', 10, 5)
		drawText(currentTime.toString(), 60, 5)

		drawText('менеджер 1', 10, 70)
		drawText(менеджер_1.состояние.toString(), 350, 70)
		drawText('менеджер 2', 10, 85)
		drawText(менеджер_2.состояние.toString(), 350, 85)
		drawText('менеджер 3', 10, 100)
		drawText(менеджер_3.состояние.toString(), 350, 100)

		drawText('курьер 1', 10, 125)
		drawText(курьер_1.состояние.toString(), 350, 125)
		drawText('курьер 2', 10, 140)
		drawText(курьер_2.состояние.toString(), 350, 140)

		drawText('Инженер 1', 10, 165)
		drawText(инженер_1.состояние.toString(), 350, 165)
		drawText('Инженер 2', 10, 180)
		drawText(инженер_2.состояние.toString(), 350, 180)
		drawText('Инженер 3', 10, 195)
		drawText(инженер_3.состояние.toString(), 350, 195) //11111111111111111111
		drawText('Инженер 4', 10, 210)
		drawText(инженер_4.состояние.toString(), 350, 210)
		drawText('Инженер 5', 10, 225)
		drawText(инженер_5.состояние.toString(), 350, 225)
		drawText('Инженер 6', 10, 240)
		drawText(инженер_6.состояние.toString(), 350, 240)
		drawText('Инженер 7', 10, 255)
		drawText(инженер_7.состояние.toString(), 350, 255)
		drawText('Инженер 8', 10, 270)
		drawText(инженер_8.состояние.toString(), 350, 270)

	}
}

result колличество_заявок_на_базовые = Result.create([статистика.количество_заявок_на_базовые],new LastValueStatistics()) 
result колличество_заявок_на_заказные = Result.create([статистика.количество_заявок_на_заказные],new LastValueStatistics()) 
result колличество_заявок_обслуженных = Result.create([статистика.количество_обслуженных_заявок],new LastValueStatistics()) 

result колличество_заявок_менеджер_1 = Result.create([менеджер_1.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_менеджер_2 = Result.create([менеджер_2.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_менеджер_3 = Result.create([менеджер_3.количество_обслуженных_заявок],new LastValueStatistics())

result колличество_заявок_инженер_1 = Result.create([инженер_1.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_2 = Result.create([инженер_2.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_3 = Result.create([инженер_3.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_4 = Result.create([инженер_4.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_5 = Result.create([инженер_5.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_6 = Result.create([инженер_6.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_7 = Result.create([инженер_7.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_инженер_8 = Result.create([инженер_8.количество_обслуженных_заявок],new LastValueStatistics()) 

result колличество_заявок_курьер_1 = Result.create([курьер_1.количество_обслуженных_заявок],new LastValueStatistics()) 
result колличество_заявок_курьер_2 = Result.create([курьер_2.количество_обслуженных_заявок],new LastValueStatistics())  


