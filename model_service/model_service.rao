
constant база_первичного_генератора = Math.round(Math.random()*9999999);
sequence базы_генераторов = new Uniform(база_первичного_генератора, 0, 9999999)
sequence вероятность_срок_поставки = new Values(#[1, 1, 0, 1, 0, 1, 1, 0, 0])
sequence вероятность_нужна = new Values(#[1, 0, 0, 1, 1, 0, 1, 0, 0])

constant болезнь_менеджера_1 = 0
constant болезнь_менеджера_2 = 1
constant болезнь_менеджера_3 = 0

constant время_начала_болезни_менеджера_1 = 60*24*30
constant время_конца_болезни_менеджера_1 = 60*24*90

constant время_начала_болезни_менеджера_2 = 60*24*30
constant время_конца_болезни_менеджера_2 = 60*24*300

constant время_начала_болезни_менеджера_3 = 60*24*60
constant время_конца_болезни_менеджера_3 = 60*24*120

constant болезнь_курьера_1 = 0
constant болезнь_курьера_2 = 0

constant время_начала_болезни_курьера_1 = 60*24*60
constant время_конца_болезни_курьера_1 = 60*24*120

constant время_начала_болезни_курьера_2 = 60*24*180
constant время_конца_болезни_курьера_2 = 60*24*210


sequence нормальное_распределение = new Normal(Math.round(базы_генераторов.next()) as int,0,1); 

double PoissonExponential(double rate) {        //Приближенная реализация закона Пуассона
       var double s = нормальное_распределение.next();
       s = Math.abs((s + 2))*rate
       return s;
}

constant вероятность_заказных_деталей = 0.5
constant вероятность_необходимости_поставки = 0.7

sequence время_доставки_деталей = new Uniform(Math.round(базы_генераторов.next()), 2*24*60, 10*24*60)
sequence время_согласования_заказа = new Uniform(Math.round(базы_генераторов.next()), 20, 1*24*60)

enum Состояние_менеджера {
       СВОБОДЕН, ЗАНЯТ, БОЛЕН
       }
/* 
enum Работоспособность_менеджера {
       Болеет,Здоров
}
*/
type Менеджер {
       int номер
       Состояние_менеджера состояние
       double производительность //Среднее количество обрабатываемых заявок в день
       int количество_обслуженных_заявок
}

resource менеджер_1 = Менеджер.create(1, Состояние_менеджера.СВОБОДЕН, 8,0)
resource менеджер_2 = Менеджер.create(2, Состояние_менеджера.СВОБОДЕН, 6.5,0)
resource менеджер_3 = Менеджер.create(3, Состояние_менеджера.СВОБОДЕН, 5.7,0)

type Курьер {
       int номер
       Состояние_курьера состояние
       double производительность //Среднее количество обрабатываемых заявок в день
       int количество_обслуженных_заявок
}

resource курьер_1 = Курьер.create(1, Состояние_курьера.СВОБОДЕН, 2.5,0)
resource курьер_2 = Курьер.create(2, Состояние_курьера.СВОБОДЕН, 3,0)

enum Состояние_курьера {
       ЗАНЯТ, СВОБОДЕН, БОЛЕН
}

type Инженер {
       int номер
       double производительность //Среднее количество создаваемых заявок в день
       int количество_созданных_заявок        
       int количество_выполненных_заявок        
}
//В данной модели инженера для нас только генерируют заявки на запчасти. Дальнейшая обработка не нужна

resource инженер_0 = Инженер.create(1, 3.0, 0,0)
resource инженер_1 = Инженер.create(1, 3.0, 0,0)
resource инженер_2 = Инженер.create(2, 2.7, 0,0)
resource инженер_3 = Инженер.create(3, 2.5, 0,0)
resource инженер_4 = Инженер.create(4, 2.2, 0,0)
resource инженер_5 = Инженер.create(5, 2.0,0,0)
resource инженер_6 = Инженер.create(6, 1.8,0,0)
resource инженер_7 = Инженер.create(7, 1.7,0,0)
resource инженер_8 = Инженер.create(8, 1.5,0,0)

def init() {
       log("База первичного генератора " + база_первичного_генератора); //Нужно для повторения эксперимента
       Поступление_заявки.plan(0,инженер_1)
       Поступление_заявки.plan(30,инженер_2)
       Поступление_заявки.plan(60,инженер_3)
       Поступление_заявки.plan(90,инженер_4)
       Поступление_заявки.plan(120,инженер_5)
       Поступление_заявки.plan(150,инженер_6)
       Поступление_заявки.plan(180,инженер_7)
       Поступление_заявки.plan(210,инженер_8)
       if(болезнь_менеджера_1 == 1){
      	 	Менеджер_болеет.plan(время_начала_болезни_менеджера_1, менеджер_1)
       }
       if(болезнь_менеджера_2 == 1){
      	 	Менеджер_болеет.plan(время_начала_болезни_менеджера_2, менеджер_2)
       }
       if(болезнь_менеджера_3 == 1){
      	 	Менеджер_болеет.plan(время_начала_болезни_менеджера_3, менеджер_3)
       }
       if(болезнь_курьера_1 == 1){
      	 	Курьер_болеет.plan(время_начала_болезни_курьера_1, курьер_1)
       }
       if(болезнь_курьера_2 == 1){
      	 	Курьер_болеет.plan(время_начала_болезни_курьера_2, курьер_2)
       }      	 
}

enum Статус_заявки_на_запчасть {
       Ожидает_обработки,
       Обрабатывается_менеджером,
       Обработана_менеджером,
       Согласовывается_инженером,
       Ожидается_поставка,
       Доставляется_курьером,
       Выполнена,
       Отменена
}

type Заявка_на_запасные_части {
       Статус_заявки_на_запчасть статус
       Инженер инженер
       double срок_поставки
       int анимация                                 // была ли анимация
}

type Статистика {
       int поступило_заявок_от_инженеров
       int количество_заявок_на_заказные
       int количество_заявок_на_базовые
       int количество_обслуженных_заявок
       int вероятность_срок_поставки                       // для табличных значений
       int количество_отмененных_заявок
       int вероятность_нужна  							   // для табличных значений
       
       int количество_работ_менеджер_1
       int количество_работ_менеджер_2
       int количество_работ_менеджер_3
       int количество_работ_курьер_1
       int количество_работ_курьер_2
       
       double минимальная_работа_менеджера_1
       double минимальная_работа_менеджера_2
       double минимальная_работа_менеджера_3
       
       double максимальная_работа_менеджера_1
       double максимальная_работа_менеджера_2
       double максимальная_работа_менеджера_3
       double полная_работа_менеджера_1
       double полная_работа_менеджера_2
       double полная_работа_менеджера_3
       
       
       double минимальная_работа_курьера_1
       double минимальная_работа_курьера_2
       
       double максимальная_работа_курьера_1
       double максимальная_работа_курьера_2
       double полная_работа_курьера_1
       double полная_работа_курьера_2
       
}
type Анимация {
	int инженер_1
	int инженер_2
	int инженер_3
	int инженер_4
	int инженер_5
	int инженер_6
	int инженер_7
	int инженер_8
}
resource анимация = Анимация.create(0, 0, 0, 0, 0, 0, 0, 0)
resource статистика = Статистика.create(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10000, 10000, 10000, 0, 0, 0, 0, 0, 0, 10000, 10000, 0, 0, 0, 0)

def terminateCondition() {	   
      return currentTime > 365*24*60; //Единица модельного времени 1 минута

}

double Рассчитать_срок_поставки() {        
    //Здесь должна быть загрузка из БД или табличные значения
статистика.вероятность_срок_поставки = вероятность_срок_поставки.next()
   if(статистика.вероятность_срок_поставки == 1)
   		return Math.max(время_доставки_деталей.next(),0)
   else 
   		return 0               
}

event Менеджер_болеет(Менеджер менеджер){
		менеджер.состояние = Состояние_менеджера.БОЛЕН
} 

event Курьер_болеет(Курьер курьер){
		курьер.состояние = Состояние_курьера.БОЛЕН
} 

rule Выздоровление_менеджера(){
	   relevant менеджер = Менеджер.all.filter[(состояние == Состояние_менеджера.БОЛЕН && currentTime > время_конца_болезни_менеджера_1 && номер == 1)
	   	|| (состояние == Состояние_менеджера.БОЛЕН && currentTime > время_конца_болезни_менеджера_2 && номер == 2)
	   	|| (состояние == Состояние_менеджера.БОЛЕН && currentTime > время_конца_болезни_менеджера_3 && номер == 3)
	   ].any
	 	def execute(){
	 		менеджер.состояние = Состояние_менеджера.СВОБОДЕН
	 	}
	   }
rule Выздоровление_курьера(){
	   relevant курьер = Курьер.all.filter[(состояние == Состояние_курьера.БОЛЕН && currentTime > время_конца_болезни_курьера_1 && номер == 1)
	   	|| (состояние == Состояние_курьера.БОЛЕН && currentTime > время_конца_болезни_курьера_2 && номер == 2)
	    ].any
	 	def execute(){
	 		курьер.состояние = Состояние_курьера.СВОБОДЕН
	 	}
	   }
event Поступление_заявки(Инженер инженер){
       инженер.количество_созданных_заявок = инженер.количество_созданных_заявок +1
       статистика.поступило_заявок_от_инженеров = статистика.поступило_заявок_от_инженеров + 1
       var double срок_поставки = Рассчитать_срок_поставки()
       if (срок_поставки == 0)
       {
               статистика.количество_заявок_на_базовые = статистика.количество_заявок_на_базовые + 1
       }
       else
               статистика.количество_заявок_на_заказные = статистика.количество_заявок_на_заказные + 1
       
       
       Заявка_на_запасные_части.create(Статус_заявки_на_запчасть.Ожидает_обработки,инженер,срок_поставки, 0)
       
       var double время_до_следующей_заявки = PoissonExponential(60*24/инженер.производительность)
       Поступление_заявки.plan(currentTime + время_до_следующей_заявки,инженер)
}

operation Обработка_заявки_менеджером(){
       relevant заявка = Заявка_на_запасные_части.all.filter[статус == Статус_заявки_на_запчасть.Ожидает_обработки].any
       relevant менеджер = Менеджер.all.filter[состояние == Состояние_менеджера.СВОБОДЕН].any
       def begin(){
               заявка.статус = Статус_заявки_на_запчасть.Обрабатывается_менеджером
               менеджер.состояние = Состояние_менеджера.ЗАНЯТ
       }
       def duration(){
       		   var double темп_менеджер = PoissonExponential(60*24/менеджер.производительность) 
       		   Рассчет_трудозатрат_менеджеров(менеджер, темп_менеджер)                                    //для статистики
               return темп_менеджер      
       }
       def end(){
     		  	if(менеджер.состояние == Состояние_менеджера.ЗАНЯТ){
             		  заявка.статус = Статус_заявки_на_запчасть.Обработана_менеджером
          		      менеджер.состояние = Состояние_менеджера.СВОБОДЕН
               		  менеджер.количество_обслуженных_заявок = менеджер.количество_обслуженных_заявок + 1
               		  заявка.инженер.количество_созданных_заявок = заявка.инженер.количество_созданных_заявок + 1  
               }
               	else if(менеджер.состояние == Состояние_менеджера.БОЛЕН){
             		  заявка.статус = Статус_заявки_на_запчасть.Ожидает_обработки
               }       
               }      
       }

void Рассчет_трудозатрат_менеджеров(Менеджер менеджер, double темп_менеджер){ // для статистики
	if(менеджер.номер == 1){
		статистика.количество_работ_менеджер_1 = статистика.количество_работ_менеджер_1 + 1
		статистика.полная_работа_менеджера_1 = статистика.полная_работа_менеджера_1 + темп_менеджер 
		if(темп_менеджер < статистика.минимальная_работа_менеджера_1)
				статистика.минимальная_работа_менеджера_1 = темп_менеджер
		if(темп_менеджер > статистика.максимальная_работа_менеджера_1)
			статистика.максимальная_работа_менеджера_1 = темп_менеджер  
	}
	else if(менеджер.номер == 2){
		статистика.количество_работ_менеджер_2 = статистика.количество_работ_менеджер_2 + 1
		статистика.полная_работа_менеджера_2 = статистика.полная_работа_менеджера_2 + темп_менеджер 
		if(темп_менеджер < статистика.минимальная_работа_менеджера_2)
				статистика.минимальная_работа_менеджера_2 = темп_менеджер
		if(темп_менеджер > статистика.максимальная_работа_менеджера_2)
			статистика.максимальная_работа_менеджера_2 = темп_менеджер
	}
	else if(менеджер.номер == 3){
		статистика.количество_работ_менеджер_3 = статистика.количество_работ_менеджер_3 + 1
		статистика.полная_работа_менеджера_3 = статистика.полная_работа_менеджера_3 + темп_менеджер 
		if(темп_менеджер < статистика.минимальная_работа_менеджера_3)
				статистика.минимальная_работа_менеджера_3 = темп_менеджер
		if(темп_менеджер > статистика.максимальная_работа_менеджера_3)
			статистика.максимальная_работа_менеджера_3 = темп_менеджер
	}
}
boolean Деталь_нужна(Заявка_на_запасные_части заявка) {        
    //Здесь должна быть загрузка из БД
    // Заявка_на_запасные_части передается для возможеость корректировки вероятности заказа
    статистика.вероятность_нужна = вероятность_нужна.next()
   if(статистика.вероятность_нужна == 1)
   		return true
   else 
   		return false
}

operation Согласование_заявки_инженером(){
       relevant заявка = Заявка_на_запасные_части.all.filter[статус == Статус_заявки_на_запчасть.Обработана_менеджером].any
       def begin(){
               заявка.статус = Статус_заявки_на_запчасть.Согласовывается_инженером
       }
       def duration(){
               return время_согласования_заказа.next()        
       }
       def end(){
               if (Деталь_нужна(заявка))
                       if (заявка.срок_поставки == 0)
                               {
                                       заявка.статус = Статус_заявки_на_запчасть.Выполнена
                                       заявка.инженер.количество_выполненных_заявок = заявка.инженер.количество_выполненных_заявок        + 1        
                               }
                       else
                               заявка.статус = Статус_заявки_на_запчасть.Ожидается_поставка
               else
                       заявка.статус = Статус_заявки_на_запчасть.Отменена                
       }
}


operation Доставка_заказных_деталей(){
       relevant курьер = Курьер.all.filter[состояние == Состояние_курьера.СВОБОДЕН].any
       relevant заявка = Заявка_на_запасные_части.all.filter[статус == Статус_заявки_на_запчасть.Ожидается_поставка].any        
	def begin(){                
		курьер.состояние = Состояние_курьера.ЗАНЯТ                
		заявка.статус = Статус_заявки_на_запчасть.Доставляется_курьером        
	}        
	def duration(){
		var double темп_курьер = PoissonExponential(60*24/курьер.производительность)         
		Рассчет_трудозатрат_курьеров(курьер, темп_курьер)           
		return темп_курьер          
    }        
	def end(){ 
		if(курьер.состояние == Состояние_курьера.ЗАНЯТ){          
			курьер.количество_обслуженных_заявок = курьер.количество_обслуженных_заявок + 1                
			заявка.инженер.количество_выполненных_заявок = заявка.инженер.количество_выполненных_заявок+ 1                        
			заявка.статус = Статус_заявки_на_запчасть.Выполнена                
			курьер.состояние = Состояние_курьера.СВОБОДЕН  
			}
		if(курьер.состояние == Состояние_курьера.БОЛЕН){                                
			заявка.статус = Статус_заявки_на_запчасть.Ожидается_поставка               
			}
		}      
} 
 

void Рассчет_трудозатрат_курьеров(Курьер курьер, double темп_курьер){ // для статистики
	if(курьер.номер == 1){
		статистика.количество_работ_курьер_1 = статистика.количество_работ_курьер_1 + 1
		статистика.полная_работа_курьера_1 = статистика.полная_работа_курьера_1 + темп_курьер 
		if(темп_курьер < статистика.минимальная_работа_курьера_1)
				статистика.минимальная_работа_курьера_1 = темп_курьер
		if(темп_курьер > статистика.максимальная_работа_курьера_1)
			статистика.максимальная_работа_курьера_1 = темп_курьер  
	}
	else if(курьер.номер == 2){
		статистика.количество_работ_курьер_2 = статистика.количество_работ_курьер_2 + 1
		статистика.полная_работа_курьера_2 = статистика.полная_работа_курьера_2 + темп_курьер 
		if(темп_курьер < статистика.минимальная_работа_курьера_2)
				статистика.минимальная_работа_курьера_2 = темп_курьер
		if(темп_курьер > статистика.максимальная_работа_курьера_2)
			статистика.максимальная_работа_курьера_2 = темп_курьер  
	}
}
rule Отгрузка_детали_инженеру(){        
relevant заявка = Заявка_на_запасные_части.all.filter[статус == Статус_заявки_на_запчасть.Выполнена].any        
	def execute(){                
		статистика.количество_обслуженных_заявок = статистика.количество_обслуженных_заявок + 1               
		заявка.erase()       
	 } 
} 




rule Отмена_заказа(){        
relevant заявка = Заявка_на_запасные_части.all.filter[статус == Статус_заявки_на_запчасть.Отменена].any        
	def execute(){               
	 	заявка.erase()     
		статистика.количество_отмененных_заявок = статистика.количество_отмененных_заявок + 1
	} 
} 
// для анимации
operation Инженер_выдал_заявку(){
	relevant заявка = Заявка_на_запасные_части.all.filter[анимация == 0 && (статус == Статус_заявки_на_запчасть.Ожидает_обработки || статус == Статус_заявки_на_запчасть.Обрабатывается_менеджером)  ].any
	def begin()   {
		заявка.анимация = 1
		if(заявка.инженер.номер== 1)
			анимация.инженер_1 = 1
		else if(заявка.инженер.номер== 2)
				анимация.инженер_2 = 1
		else if(заявка.инженер.номер== 3)
				анимация.инженер_3 = 1
		else if(заявка.инженер.номер== 4)
				анимация.инженер_4 = 1
		else if(заявка.инженер.номер== 5)
				анимация.инженер_5 = 1
		else if(заявка.инженер.номер== 6)
				анимация.инженер_6 = 1
		else if(заявка.инженер.номер== 7)
				анимация.инженер_7 = 1
		else if(заявка.инженер.номер== 8)
				анимация.инженер_8 = 1
	}
	def duration(){
		return 25
	}
	def end(){
		заявка.анимация = 1
		if(анимация.инженер_1 == 1)
			анимация.инженер_1 = 0
		else if(анимация.инженер_2 == 1)
				анимация.инженер_2 = 0
		else if(анимация.инженер_3 == 1)
				анимация.инженер_3 = 0
		else if(анимация.инженер_4 == 1)
				анимация.инженер_4 = 0
		else if(анимация.инженер_5 == 1)
				анимация.инженер_5 = 0
		else if(анимация.инженер_6 == 1)
				анимация.инженер_6 = 0
		else if(анимация.инженер_7 == 1)
				анимация.инженер_7 = 0
		else if(анимация.инженер_8 == 1)
				анимация.инженер_8 = 0
	}
}

logic Model{        
	// для анимации
	activity инженер_выдал_заявку = new Activity(Инженер_выдал_заявку.create()) 	

	//модель
	activity обработка_заявки_менеджером = new Activity(Обработка_заявки_менеджером.create())        
	activity согласование_заявки_инженером = new Activity(Согласование_заявки_инженером.create())        
	activity доставка_заказных_деталей = new Activity(Доставка_заказных_деталей.create())        
	activity отгрузка_детали_инженеру = new Activity(Отгрузка_детали_инженеру.create())        
	activity отмена_заказа = new Activity(Отмена_заказа.create()) 
	activity выздоровление_менеджера = new Activity(Выздоровление_менеджера.create()) 
	activity выздоровление_курьера = new Activity(Выздоровление_курьера.create()) 
} 


	result количество_заявок_инженер_1 = Result.create([инженер_1.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_2 = Result.create([инженер_2.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_3 = Result.create([инженер_3.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_4 = Result.create([инженер_4.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_5 = Result.create([инженер_5.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_6 = Result.create([инженер_6.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_7 = Result.create([инженер_7.количество_выполненных_заявок],new LastValueStatistics())  
	result количество_заявок_инженер_8 = Result.create([инженер_8.количество_выполненных_заявок],new LastValueStatistics())  

	result количество_заявок_менеджер_1 = Result.create([менеджер_1.количество_обслуженных_заявок],new LastValueStatistics())  
	result количество_заявок_менеджер_2 = Result.create([менеджер_2.количество_обслуженных_заявок],new LastValueStatistics())  
	result количество_заявок_менеджер_3 = Result.create([менеджер_3.количество_обслуженных_заявок],new LastValueStatistics()) 


	result количество_заявок_на_базовые = Result.create([статистика.количество_заявок_на_базовые],new LastValueStatistics())  
	result количество_заявок_на_заказные = Result.create([статистика.количество_заявок_на_заказные],new LastValueStatistics())  
	result количество_заявок_обслуженных = Result.create([статистика.количество_обслуженных_заявок],new LastValueStatistics())  
	result количество_отмененных_заявок = Result.create([статистика.количество_отмененных_заявок],new LastValueStatistics())  
	
	result количество_заявок_курьер_1 = Result.create([курьер_1.количество_обслуженных_заявок],new LastValueStatistics())  
	result количество_заявок_курьер_2 = Result.create([курьер_2.количество_обслуженных_заявок],new LastValueStatistics()) 

	result максимарьная_работа_менеджера_1 = Result.create([статистика.максимальная_работа_менеджера_1],new LastValueStatistics()) 
	result максимарьная_работа_менеджера_2 = Result.create([статистика.максимальная_работа_менеджера_2],new LastValueStatistics()) 
	result максимарьная_работа_менеджера_3 = Result.create([статистика.максимальная_работа_менеджера_3],new LastValueStatistics()) 
	
	result минимальная_работа_менеджера_1 = Result.create([статистика.минимальная_работа_менеджера_1],new LastValueStatistics())
	result минимальная_работа_менеджера_2 = Result.create([статистика.минимальная_работа_менеджера_2],new LastValueStatistics()) 
	result минимальная_работа_менеджера_3 = Result.create([статистика.минимальная_работа_менеджера_3],new LastValueStatistics()) 
	
	result полная_работа_менеджера_1 = Result.create([статистика.полная_работа_менеджера_1],new LastValueStatistics())
	result полная_работа_менеджера_2 = Result.create([статистика.полная_работа_менеджера_2],new LastValueStatistics())
	result полная_работа_менеджера_3 = Result.create([статистика.полная_работа_менеджера_3],new LastValueStatistics())
	
	result количество_работ_менеджера_1 = Result.create([статистика.количество_работ_менеджер_1],new LastValueStatistics())
	result количество_работ_менеджера_2 = Result.create([статистика.количество_работ_менеджер_2],new LastValueStatistics())
	result количество_работ_менеджера_3 = Result.create([статистика.количество_работ_менеджер_3],new LastValueStatistics())
	
	result максимарьная_работа_курьера_1 = Result.create([статистика.максимальная_работа_курьера_1],new LastValueStatistics())
	result максимарьная_работа_курьера_2 = Result.create([статистика.максимальная_работа_курьера_2],new LastValueStatistics())
	
	result минимальная_работа_курьера_1 = Result.create([статистика.минимальная_работа_курьера_1],new LastValueStatistics())
	result минимальная_работа_курьера_2 = Result.create([статистика.минимальная_работа_курьера_2],new LastValueStatistics())
	
	result полная_работа_курьера_1 = Result.create([статистика.полная_работа_курьера_1],new LastValueStatistics())
	result полная_работа_курьера_2 = Result.create([статистика.полная_работа_курьера_2],new LastValueStatistics())
	
	result количество_работ_курьера_1 = Result.create([статистика.количество_работ_курьер_1],new LastValueStatistics())
	result количество_работ_курьера_2 = Result.create([статистика.количество_работ_курьер_2],new LastValueStatistics())
	
 
	
	 
	
constant width = 40
constant height = 40


frame Frame {
	def init() {
		
	}

	def draw() {
		
		
		drawText("инженер_1", 60, 0) // подписи
		drawText("инженер_2", 60, 60)
		drawText("инженер_3", 60, 120)
		drawText("инженер_4", 60, 180)
		drawText("инженер_5", 60, 240)
		drawText("инженер_6", 60, 300)
		drawText("инженер_7", 60, 360)
		drawText("инженер_8", 60, 420)
		drawText("менеджер_1", 200, 150)
		drawText("менеджер_2", 200, 210)
		drawText("менеджер_3", 200, 270)
		drawText("курьер_1", 300, 180)		
		drawText("курьер_2", 300, 240)
		drawText("склад", 400, 210)
		// склад
		drawRectangle( 400,  225, width,  height)
		
		
		drawLine(150, 30, 150, 455)  // общие линии
		drawLine(285, 185, 285, 305)
		drawLine(380, 215, 380, 275)
		
		drawLine(100, 30, 150, 30) // инженеры линии
		drawLine(100, 95, 150, 95)
		drawLine(100, 150, 150, 150)
		drawLine(100, 215, 150, 215)
		drawLine(100, 275, 150, 275)
		drawLine(100, 335, 150, 335)
		drawLine(100, 395, 150, 395)
		drawLine(100, 455, 150, 455)
		
		drawLine(150, 185, 200, 185)
		drawLine(150, 245, 200, 245)
		drawLine(150, 305, 200, 305)
		
		drawLine(240, 185, 285, 185)// менеджеры линии
		drawLine(240, 245, 285, 245)
		drawLine(240, 305, 285, 305)
		
		drawLine(285, 215, 300, 215)
		drawLine(285, 275, 300, 275)
		
		
		drawLine(340, 215, 380, 215)// курьеры линии
		drawLine(340, 275, 380, 275)
		
		drawLine(380, 245, 400, 245)
		//--------------инженеры-----------------------------------------------------------------------------
		if(анимация.инженер_1 == 1){
			drawRectangle( 60,  15, width,  height, RaoColor.GREEN, RaoColor.BLACK) 
		}
		else {
			drawRectangle( 60,  15, width,  height)
		}
		if(анимация.инженер_2 == 1){
			drawRectangle( 60,  75, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  75, width,  height)
		}
		if(анимация.инженер_3 == 1){
			drawRectangle( 60,  135, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  135, width,  height)
		}
		if(анимация.инженер_4 == 1){
			drawRectangle( 60,  195, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  195, width,  height)
		}
		if(анимация.инженер_5 == 1){
			drawRectangle( 60,  255, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  255, width,  height)
		}
		if(анимация.инженер_6 == 1){
			drawRectangle( 60,  315, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  315, width,  height)
		}
		if(анимация.инженер_7 == 1){
			drawRectangle( 60,  375, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  375, width,  height)
		}
		if(анимация.инженер_8 == 1){
			drawRectangle( 60,  435, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 60,  435, width,  height)
		}
		//--------------менежеры-----------------------------------------------------------------------------
		if(менеджер_1.состояние == Состояние_менеджера.ЗАНЯТ){
			drawRectangle( 200,  165, width,  height, RaoColor.GREEN, RaoColor.BLACK) 
		}
		else {
			drawRectangle( 200,  165, width,  height)
		}
		if(менеджер_2.состояние == Состояние_менеджера.ЗАНЯТ){
			drawRectangle( 200,  225, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 200,  225, width,  height)
		}
		if(менеджер_3.состояние == Состояние_менеджера.ЗАНЯТ){
			drawRectangle( 200,  285, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
			drawRectangle( 200,  285, width,  height)
		}
		//--------------курьеры-----------------------------------------------------------------------------		
		if(курьер_1.состояние == Состояние_курьера.ЗАНЯТ){
			drawRectangle( 300,  195, width,  height, RaoColor.GREEN, RaoColor.BLACK) 
		}
		else {
			drawRectangle( 300,  195, width,  height)
		}
		if(курьер_2.состояние == Состояние_курьера.ЗАНЯТ){
			drawRectangle( 300,  255, width,  height, RaoColor.GREEN, RaoColor.BLACK)
		}
		else {
				drawRectangle( 300,  255, width,  height)
		}	
		//drawText(String text, int x, int y)
		drawText(инженер_1.количество_созданных_заявок , 60, 15)
		drawText(инженер_2.количество_созданных_заявок , 60, 75)
		drawText(инженер_3.количество_созданных_заявок , 60, 135)
		drawText(инженер_4.количество_созданных_заявок , 60, 195)
		drawText(инженер_5.количество_созданных_заявок , 60, 255)
		drawText(инженер_6.количество_созданных_заявок , 60, 315)
		drawText(инженер_7.количество_созданных_заявок , 60, 375)
		drawText(инженер_8.количество_созданных_заявок , 60, 435)
		
		drawText(менеджер_1.количество_обслуженных_заявок, 200, 165)
		drawText(менеджер_2.количество_обслуженных_заявок, 200, 225)
		drawText(менеджер_3.количество_обслуженных_заявок, 200, 285)
		
		drawText(курьер_1.количество_обслуженных_заявок, 300, 195)
		drawText(курьер_2.количество_обслуженных_заявок, 300, 255)
		
		drawText(статистика.количество_обслуженных_заявок, 400, 225)
		
		drawText("Количество отмененных заявок - ", 180, 10)
		drawText(статистика.количество_отмененных_заявок, 400, 10)
		
		drawText("Выполненны заявки инженер 1 - ", 180, 30)
		drawText(инженер_1.количество_выполненных_заявок, 400, 30)
		
		drawText("Выполненные заявки инженер 2 - ", 180, 50)
		drawText(инженер_2.количество_выполненных_заявок, 400, 50)
		
		drawText("Выполненные заявки инженер 3 - ", 180, 70)
		drawText(инженер_3.количество_выполненных_заявок, 400, 70)
		
		drawText("Выполненные заявки инженер 4 - ", 180, 90)
		drawText(инженер_4.количество_выполненных_заявок, 400, 90)
		
		drawText("Выполненные заявки инженер 5 - ", 180, 110)
		drawText(инженер_5.количество_выполненных_заявок, 400, 110)
		
		drawText("Выполненные заявки инженер 6 - ", 180, 350)
		drawText(инженер_6.количество_выполненных_заявок, 400, 350)
		
		drawText("Выполненные заявки инженер 7 - ", 180, 370)
		drawText(инженер_7.количество_выполненных_заявок, 400, 370)
		
		drawText("Выполненные заявки инженер 8 - ", 180, 390)
		drawText(инженер_8.количество_выполненных_заявок, 400, 390)
		
		
		
		drawText("Заявки на базовые детали - ", 180, 410)
		drawText(статистика.количество_заявок_на_базовые, 400, 410)
		
		drawText("Заявки на заказные детали - ", 180, 430)
		drawText(статистика.количество_заявок_на_заказные, 400, 430)
		
	}
	
}