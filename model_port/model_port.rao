//Обновления: добавляем танкеры трех типов, теперь они заполняются в зависимости от типа.
//добавляем три причала
enum Состояние_буксира {Стоит_у_очереди, Стоит_у_причала, Занят}
enum Состояние_причала {Свободен, Занят}
enum Состояние_шторма {Спокоен, Штормит, Начался}
enum Тип_танкера {Тип1, Тип2, Тип3}
enum Состояние_танкера {Пришел, Ожидает_заполнения, Начал_заполняться, Заполнен}

type Буксиры { //объявление типа ресурса
	Состояние_буксира состояние_буксира;
	int количество_в_очереди;
	int количество_обслуженных;
}
type Причалы {
	Состояние_причала состояние_причала;
	int количество_обслуженных_причалом;
}
type Танкеры {
	Тип_танкера тип;
	Состояние_танкера состояние;
	double Время_прихода;
}
type Штормы {
	Состояние_шторма состояние;
}

resource тртрмитя = Буксиры.create(Состояние_буксира.Стоит_у_очереди, 0, 0); //создание ресурса с именем
resource причал1 = Причалы.create(Состояние_причала.Свободен, 0);
resource причал2 = Причалы.create(Состояние_причала.Свободен, 0);
resource причал3 = Причалы.create(Состояние_причала.Свободен, 0);
resource шторм = Штормы.create(Состояние_шторма.Спокоен);

event Событие_прихода_танкера1() {
	Танкеры.create(Тип_танкера.Тип1, Состояние_танкера.Пришел, currentTime);
	Событие_прихода_танкера1.plan(currentTime + интервал_прихода1.next());
	тртрмитя.количество_в_очереди = тртрмитя.количество_в_очереди + 1;
}
event Событие_прихода_танкера2() {
	Танкеры.create(Тип_танкера.Тип2, Состояние_танкера.Пришел, currentTime);
	Событие_прихода_танкера2.plan(currentTime + интервал_прихода2.next());
	тртрмитя.количество_в_очереди = тртрмитя.количество_в_очереди + 1;
}
event Событие_прихода_танкера3() {
	Танкеры.create(Тип_танкера.Тип3, Состояние_танкера.Пришел, currentTime);
	Событие_прихода_танкера3.plan(currentTime + интервал_прихода3.next());
	тртрмитя.количество_в_очереди = тртрмитя.количество_в_очереди + 1;
}
event Событие_начала_шторма() {   //описание события
	шторм.состояние = Состояние_шторма.Начался;
	Событие_начала_шторма.plan(currentTime + периодичность_шторма.next());
}

//#1
operation Образец_шторма() {   //описание образца
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Начался];

	def duration() { //Задание длительности выполнения операций
		return длительность_шторма.next();
	}
	def begin() {  //Описание инструкций, которые должны выполняться в начале выполнения операций
		_шторм.состояние = Состояние_шторма.Штормит;
	}
	def end() {   //Описание инструкций, которые должны выполняться в конце выполнения операций
		_шторм.состояние = Состояние_шторма.Спокоен;		
	}
}

//#2
operation Образец_буксирования_пустого_танкера() {
	relevant _тртрмитя = тртрмитя.onlyif[состояние_буксира == Состояние_буксира.Стоит_у_очереди  
			&& количество_в_очереди > 0];
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Спокоен];
	relevant _Танкер = Танкеры.all.filter[состояние == Состояние_танкера.Пришел].minBySafe[время_прихода]; //minbysafe ВРЕМЯ ПРИХОДА ТАНКЕРА! и minbysafe ЧИСЛО ОБСЛУЖЕННЫХ - это для соблюдения П.№1 и П.№2

	def duration() {
		return длительность_буксирования.next();
	}
	def begin() {
		_тртрмитя.количество_в_очереди = _тртрмитя.количество_в_очереди - 1;
		_тртрмитя.состояние_буксира = Состояние_буксира.Занят;
	}
	def end() {
		_тртрмитя.состояние_буксира = Состояние_буксира.Стоит_у_причала;
		_Танкер.состояние = Состояние_танкера.Ожидает_заполнения;
	}
}

//#3 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
operation Образец_заполнения_танкера() {
	relevant _тртрмитя = тртрмитя.onlyif[состояние_буксира == Состояние_буксира.Стоит_у_причала];
	relevant _Танкер = Танкеры.all.filter[состояние == Состояние_танкера.Ожидает_заполнения].any; 
	relevant _Причал = Причалы.all.filter[состояние_причала == Состояние_причала.Свободен].any;	

	def duration() {		
		if (_Танкер.тип == Тип_танкера.Тип1) {
			return длительность_заполнения1.next();}
		else {
				if (_Танкер.тип == Тип_танкера.Тип2) {
					return длительность_заполнения2.next();}
				else {
					return длительность_заполнения3.next();}
			}
}
	def begin() {
		_Причал.состояние_причала = Состояние_причала.Занят;
		_Танкер.состояние = Состояние_танкера.Начал_заполняться;
	}
	def end() {
		_Причал.состояние_причала = Состояние_причала.Свободен;
		_Причал.количество_обслуженных_причалом = _Причал.количество_обслуженных_причалом + 1;
		_Танкер.состояние = Состояние_танкера.Заполнен;
	}
}
//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

//#4
operation Образец_буксирования_заполненного_танкера() {
	relevant _тртрмитя = тртрмитя.onlyif[состояние_буксира == Состояние_буксира.Стоит_у_причала];
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Спокоен];
	relevant _Танкер = Танкеры.all.filter[состояние == Состояние_танкера.Заполнен].any;		

	def duration() {
		return длительность_буксирования.next();
	}
	def begin() {
		_тртрмитя.состояние_буксира = Состояние_буксира.Занят;
	}
	def end() {
		_тртрмитя.состояние_буксира = Состояние_буксира.Стоит_у_очереди;
		_тртрмитя.количество_обслуженных =  _тртрмитя.количество_обслуженных + 1;
	}
}

//#5
operation Образец_перемещения_пустого_буксира_к_очереди() {
	relevant _тртрмитя = тртрмитя.onlyif[состояние_буксира == Состояние_буксира.Стоит_у_причала  
			&& количество_в_очереди > 0];
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Спокоен];
	relevant _Танкер = Танкеры.all.filter[состояние == Состояние_танкера.Пришел].any;
	relevant _Причал = Причалы.all.filter[состояние_причала == Состояние_причала.Свободен].any;	
	
	def duration() {
		return длительность_буксирования.next();
	}
	def begin() {
		_тртрмитя.состояние_буксира = Состояние_буксира.Занят;
	}
	def end() {
		_тртрмитя.состояние_буксира = Состояние_буксира.Стоит_у_очереди;
	}
}

logic Работа_модели {
	activity буксирование_танкера_к_причалу = new Activity(Образец_буксирования_пустого_танкера.create());
	activity заполнение_танкера = new Activity(Образец_заполнения_танкера.create());
	activity буксирование_танкера_от_причала = new Activity(Образец_буксирования_заполненного_танкера.create());
	activity штормление = new Activity(Образец_шторма.create());
	activity возвращение_буксира_к_очереди = new Activity(Образец_перемещения_пустого_буксира_к_очереди.create());
}

sequence интервал_прихода1 = new Values(#[10]);
sequence интервал_прихода2 = new Values(#[15]);
sequence интервал_прихода3 = new Values(#[20]);
sequence длительность_буксирования = new Values(#[5]); //new Uniform(123456789, 20, 40); //new Exponential(123456789, 1/30.0);
sequence длительность_заполнения1 = new Values(#[31]);
sequence длительность_заполнения2 = new Values(#[32]);
sequence длительность_заполнения3 = new Values(#[33]);
sequence периодичность_шторма = new Values(#[90]);
sequence длительность_шторма = new Values(#[20]);

def init() {
	Событие_прихода_танкера1.plan(currentTime + интервал_прихода1.next());
	Событие_прихода_танкера2.plan(currentTime + интервал_прихода2.next());
	Событие_прихода_танкера3.plan(currentTime + интервал_прихода3.next());
	Событие_начала_шторма.plan(currentTime + периодичность_шторма.next());       
}

def terminateCondition() {
	return currentTime >= 240; //7 * 12 * 60;
}

resultType Занятость_буксира<Состояние_буксира>() {
	def evaluate() {
		return тртрмитя.состояние_буксира
	}
}
resultType Занятость_причала1<Состояние_причала>() {
	def evaluate() {
		return причал1.состояние_причала
	}
}

result занятость_буксира = new Занятость_буксира();
result длина_очереди = new Value([тртрмитя.количество_в_очереди]);
result Всего_обслужено_Митей = new Value([тртрмитя.количество_обслуженных]);
result занятость_причала1 = new Занятость_причала1();
result Всего_заполнено_причалом1 = new Value([причал1.количество_обслуженных_причалом]);
result Всего_заполнено_причалом2 = new Value([причал2.количество_обслуженных_причалом]);
result Всего_заполнено_причалом3 = new Value([причал3.количество_обслуженных_причалом]);
result Пропускная_способность = new Value([тртрмитя.количество_обслуженных / currentTime * 60]);
result Длительность_работы = new Value([currentTime / 60]);