enum OperatorState {FREE, BUSY}

type TechSupport {
	OperatorState operatorState
	int queueLength
	int peopleServed
}

resource techSupport = TechSupport.create(OperatorState.FREE, 0, 0)

event NewCall() {
	techSupport.queueLength = techSupport.queueLength + 1
	NewCall.plan(currentTime + newCallInterval.next())
}

operation CallProcessing() {
	relevant techSupport_ = techSupport.onlyif[queueLength > 0 && operatorState == OperatorState.FREE]

	def begin() {
		techSupport_.queueLength = techSupport_.queueLength - 1
		techSupport_.operatorState = OperatorState.BUSY
	}

	def duration() {
		return callProcessingTime.next()
	}

	def end() {
		techSupport_.peopleServed = techSupport_.peopleServed + 1
		techSupport_.operatorState = OperatorState.FREE
	}
}

sequence newCallInterval = new Exponential(123456789, 1 / 30.0)
sequence callProcessingTime = new Uniform(123456789, 20, 40)

logic Model {
	activity callProcessing = new Activity(CallProcessing.create())
}

def init() {
	NewCall.plan(newCallInterval.next())
}

def terminateCondition() {
	return currentTime >= 480
}

result totalPeopleServed = Result.create([techSupport.peopleServed])
result queueLengthStatistics = Result.create([techSupport.queueLength])
