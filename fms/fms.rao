constant TRUCK_LOADING_DURATION = 1.5
constant TRUCK_TRANSFER_DURATION = 2.0
constant INSTALLING_DURATION_ON_MACHINE = 1.0
constant MACHINE_UNLOADING_DURATION = 0.5
constant ROBOT_RETURN_DURATION = 0.2

sequence exponential = new Exponential(123456789)

enum Position {
	MACHINE_1, MACHINE_2, MACHINE_3, STORAGE_1, STORAGE_2, TRUCK_1_FROM, TRUCK_1_TO, TRUCK_2_FROM, TRUCK_2_TO, NOWHERE
}

type Storages {
	int index
	int currentCount
}

resource storage1 = Storages.create(1, 10)
resource storage2 = Storages.create(2, 0)

enum TruckState {FREE, BUSY, LOADED, MOVING, ARRIVED, WAITING}
type Trucks {
	int index
	Position position
	TruckState state
}
resource truck1 = Trucks.create(1, Position.TRUCK_1_FROM, TruckState.FREE)
resource truck2 = Trucks.create(2, Position.TRUCK_2_FROM, TruckState.FREE)

enum RobotState {FREE, BUSY}
type Robots {
	int index
	Position position
	RobotState state
}
resource robot1 = Robots.create(1, Position.STORAGE_1, RobotState.FREE)
resource robot2 = Robots.create(2, Position.TRUCK_1_TO, RobotState.FREE)
resource robot3 = Robots.create(3, Position.TRUCK_2_TO, RobotState.FREE)

enum MachineState {FREE, LOADING, READY_FOR_MACHINING, MACHINING, UNLOADING, FINISHED_MACHINING}
type Machines {
	int index
	Position position
	MachineState state
	double machiningDuration
}
resource machine1 = Machines.create(1, Position.MACHINE_1, MachineState.FREE, 28)
resource machine2 = Machines.create(2, Position.MACHINE_2, MachineState.FREE, 28)
resource machine3 = Machines.create(3, Position.MACHINE_3, MachineState.FREE, 15)

type Details {
	int index
	Position position
}
resource detail1 = Details.create(1, Position.STORAGE_1)
resource detail2 = Details.create(2, Position.STORAGE_1)
resource detail3 = Details.create(3, Position.STORAGE_1)
resource detail4 = Details.create(4, Position.STORAGE_1)
resource detail5 = Details.create(5, Position.STORAGE_1)
resource detail6 = Details.create(6, Position.STORAGE_1)
resource detail7 = Details.create(7, Position.STORAGE_1)
resource detail8 = Details.create(8, Position.STORAGE_1)
resource detail9 = Details.create(9, Position.STORAGE_1)
resource detail10 = Details.create(10, Position.STORAGE_1)

def terminateCondition() {
	return storage2.currentCount == 10
}

operation LoadingDetail() {
	relevant detail = Details.all.filter[position == Position.STORAGE_1].any
	relevant robot = Robots.all.filter [
		position == Position.STORAGE_1 && state == RobotState.FREE
	].any
	relevant truck = Trucks.all.filter [
		position == Position.TRUCK_1_FROM && state == TruckState.FREE
	].any

	def begin() {
		storage1.currentCount = storage1.currentCount - 1

		robot.state = RobotState.BUSY
		truck.state = TruckState.BUSY

		robot.position = Position.NOWHERE
		detail.position = robot.position
	}

	def duration() {
		return exponential.next(1.0 / TRUCK_LOADING_DURATION)
	}

	def end() {
		robot.state = RobotState.FREE
		truck.state = TruckState.LOADED

		robot.position = Position.TRUCK_1_FROM
		detail.position = robot.position
	}
}

operation TransferingDetail() {
	relevants truck,detail=combination(
	Trucks.all.filter[state == TruckState.LOADED], Details.all).filter [
		truck.position == detail.position
	].any of types Trucks,Details

	def begin() {
		truck.state = TruckState.MOVING
		detail.position = Position.NOWHERE
	}

	def duration() {
		return exponential.next(1.0 / TRUCK_TRANSFER_DURATION)
	}

	def end() {
		truck.state = TruckState.ARRIVED

		truck.position = whereTruckMove(truck.position)
		detail.position = truck.position
	}
}

Position whereTruckMove(Position position){
	var _position = Position.NOWHERE;

	switch (position) {
		case TRUCK_1_FROM: {
			_position = Position.TRUCK_1_TO
		}
		case TRUCK_2_FROM: {
			_position = Position.TRUCK_2_TO
		}
		case TRUCK_1_TO: {
			_position = Position.TRUCK_1_FROM
		}
		case TRUCK_2_TO: {
			_position = Position.TRUCK_2_FROM
		}
	}

	return _position
}

operation InstallingOnMachine() {
	relevants machine,truck,robot,detail = combination(
		Machines.all.filter[state == MachineState.FREE],
		Trucks.all.filter[state == TruckState.ARRIVED],
		Robots.all.filter[state == RobotState.FREE],
		Details.all
	).filter [
		truck.position == robot.position && truck.position == detail.position &&
			isRobotConnectedWithMachine(robot.index, machine.index)
	].any of types Machines, Trucks,Robots,Details

	def begin() {
		machine.state = MachineState.LOADING
		truck.state = TruckState.WAITING
		robot.state = RobotState.BUSY
	}

	def duration() {
		return exponential.next(1.0 / INSTALLING_DURATION_ON_MACHINE)
	}

	def end() {
		machine.state = MachineState.READY_FOR_MACHINING
		truck.state = TruckState.FREE
		robot.state = RobotState.FREE

		robot.position = machine.position
		detail.position = machine.position
	}
}

operation Machining() {

	relevants detail, machine=combination(Details.all, Machines.all.filter[state == MachineState.READY_FOR_MACHINING]).
		filter[detail.position == machine.position].any of types Details, Machines

		def begin() {
			machine.state = MachineState.MACHINING
		}

		def duration() {
			return machine.machiningDuration
		}

		def end() {
			machine.state = MachineState.FINISHED_MACHINING
		}
	}

	operation LoadingFromMachineToTruck() {

		relevant truck=Trucks.all.filter [
			index == 2 && state == TruckState.FREE && position == Position.TRUCK_2_FROM
		].any

		relevants machine,detail,robot = combination(
			Machines.all.filter[state == MachineState.FINISHED_MACHINING && position != Position.MACHINE_3],
			Details.all,
			Robots.all.filter [
				state == RobotState.FREE
			]
		).filter [
			machine.position == detail.position && isRobotConnectedWithMachine(robot.index, machine.index)
		].any of types Machines, Details,Robots

		def begin() {
			machine.state = MachineState.UNLOADING
			robot.state = RobotState.BUSY
			truck.state = TruckState.BUSY
			detail.position = Position.NOWHERE
		}

		def duration() {
			return exponential.next(1.0 / MACHINE_UNLOADING_DURATION)
		}

		def end() {
			machine.state = MachineState.FREE
			robot.state = RobotState.FREE
			truck.state = TruckState.LOADED

			robot.position = Position.TRUCK_2_FROM
			detail.position = robot.position
		}
	}

	boolean isRobotConnectedWithMachine(int robotIndex, int machineIndex)
{
		if (robotIndex == 2) {
			return machineIndex == 1 || machineIndex == 2
		} else if (robotIndex == 3) {
			return machineIndex == 3
		}

		return false
	}

	operation FinishingMachiningOnMachine3() {
		relevant machine = machine3.onlyif[state == MachineState.FINISHED_MACHINING]
		relevant detail = Details.all.filter[position == machine.position].any
		relevant storage = storage2

		def begin() {
			machine.state = MachineState.UNLOADING
			detail.position = Position.NOWHERE
		}

		def duration() {
			return exponential.next(1.0 / MACHINE_UNLOADING_DURATION)
		}

		def end() {
			machine.state = MachineState.FREE
			detail.position = Position.STORAGE_2

			storage.currentCount = storage.currentCount + 1
		}
	}

	operation RobotReturn() {
		relevant robot = Robots.all.filter [
			position != getRobotReturnPosition(position) && state == RobotState.FREE
		].any

		def begin() {
			robot.state = RobotState.BUSY
		}

		def duration() {
			return ROBOT_RETURN_DURATION
		}

		def end() {
			robot.state = RobotState.FREE
			robot.position = getRobotReturnPosition(robot.position)
		}
	}

	Position getRobotReturnPosition(Position currentPosition) {
		var returnPosition = currentPosition;

		switch (currentPosition) {
			case TRUCK_1_FROM: {
				returnPosition = Position.STORAGE_1
			}
			case MACHINE_1: {
				returnPosition = Position.TRUCK_1_TO
			}
			case MACHINE_2: {
				returnPosition = Position.TRUCK_1_TO
			}
			case TRUCK_2_FROM: {
				returnPosition = Position.TRUCK_1_TO
			}
			case MACHINE_3: {
				returnPosition = Position.TRUCK_2_TO
			}
		}
		return returnPosition
	}

	operation TruckReturn() {
		relevant truck = Trucks.all.filter[state == TruckState.FREE && isTruckInToPosition(position)].any

		def begin() {
			truck.state = TruckState.BUSY
		}

		def duration () {
			return exponential.next(1.0 / TRUCK_TRANSFER_DURATION)
		}

		def end() {
			truck.state = TruckState.FREE
			truck.position = whereTruckMove(truck.position)
		}
	}

	boolean isTruckInToPosition(Position position){
		if (position == Position.TRUCK_1_TO || position == Position.TRUCK_2_TO)
			return true
		else
			return false;
	}

	logic Model {
		activity loadingDetail = new Activity(LoadingDetail.create())

		activity transferingDetail = new Activity(TransferingDetail.create())

		activity installingOnMachine = new Activity(InstallingOnMachine.create())

		activity machining = new Activity(Machining.create())

		activity loadingFromMachineToTruck = new Activity(LoadingFromMachineToTruck.create())

		activity finishingMachiningOnMachine3 = new Activity(FinishingMachiningOnMachine3.create())

		activity robotReturn = new Activity(RobotReturn.create())

		activity truckReturn = new Activity(TruckReturn.create())
	}

	frame Frame {
		def init() {
			background = new Background(800, 600, RaoColor.WHITE)
		}
		def draw() {
			val yOffset = 15;

			drawText('Time:', 10, 5)
			drawText(currentTime.toString(), 60, 5)
			drawText('STATE', 350, 45);
			drawText('POSITION', 600, 45);

			for (machine : Machines.all) {
				drawText('machine ' + (machine.number + 1), 10, 70 + machine.number * yOffset);
				drawText(machine.state.toString(), 350, 70 + machine.number * yOffset);
				drawText(machine.position.toString(), 600, 70 + machine.number * yOffset);
			}

			for (truck : Trucks.all) {
				drawText('truck ' + (truck.number + 1), 10, 125 + truck.number * yOffset)
				drawText(truck.state.toString(), 350, 125 + truck.number * yOffset)
				drawText(truck.position.toString(), 600, 125 + truck.number * yOffset)
			}

			for (robot : Robots.all) {
				drawText('robot ' + (robot.number + 1), 10, 165 + robot.number * yOffset)
				drawText(robot.state.toString(), 350, 165 + robot.number * yOffset)
				drawText(robot.position.toString(), 600, 165 + robot.number * yOffset)
			}

			for (storage : Storages.all) {
				drawText('Details count in storage ' + (storage.number + 1), 10, 220 + storage.number * yOffset)
				drawText(storage.currentCount.toString(), 350, 220 + storage.number * yOffset)
			}

			drawText('POSITION', 350, 280);
			for (detail : Details.all) {
				drawText('detail ' + (detail.number + 1), 10, 300 + detail.number * yOffset)
				drawText(detail.position.toString(), 350, 300 + detail.number * yOffset)
			}
		}
	}
	