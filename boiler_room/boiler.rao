enum Состояние_газовой_горелки {Горит, Не_горит}
type Газовая_горелка {
    double Мощность_double;
	String Мощность_string;	
    Состояние_газовой_горелки состояние_газовой_горелки;
}

enum Состояние_клапана {Открыт, Закрыт}
type Клапан {
    Состояние_клапана состояние_клапана;
}

enum Состояние_вентилятора {Включен, Выключен}
type Вентилятор {
    Состояние_вентилятора Состояние_вентилятора;
}

enum Состояние_насоса {Включен, Выключен}
type Насос {
    Состояние_насоса Состояние_насоса;
}

type Барометр {
	double Давление_double;
	String Давление_string;	
}

type Термометр {
	double Температура_double;	
	String Температура_string;	
}

enum Состояние_котельной {Все_системы_функционируют, Критическое_давление, Пожар}
type Котельная {
	Состояние_котельной Состояние_котельной;
}

type Часы {
	int День;
	int Час;
	int Минута;
	int Секунда;
}

resource газовая_горелка = Газовая_горелка.create (50, "50", Состояние_газовой_горелки.Не_горит);
resource клапан_ввода_газа_к_котлу = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_вывода_газа_в_атмосферу = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_ввода_газа_к_газовой_горелке = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_ввода_воздуха_к_газовой_горелке = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_выхода_воды_из_котла = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_входа_воды_в_котел = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_входа_воды_в_насос = Клапан.create (Состояние_клапана.Закрыт);
resource клапан_выхода_воды_из_насоса = Клапан.create (Состояние_клапана.Закрыт);
resource насос_котла = Насос.create (Состояние_насоса.Выключен);
resource вентилятор_горелки = Вентилятор.create (Состояние_вентилятора.Выключен);
resource газ_к_котлу = Барометр.create(300, "300");
resource газ_к_газовой_горелке = Барометр.create(30, "30");
resource улица = Термометр.create(-20, "-20");
resource вода_входа_в_котел = Термометр.create(20, "20");
resource вода_выхода_из_котла = Термометр.create(105, "105");
resource окно_состояний = Котельная.create(Состояние_котельной.Все_системы_функционируют);
resource часы = Часы.create(0, 0, 0, 0);

constant период_опроса = 10;

// За сутки: 
// 00:00 Температура_на_улице = -20.0 (начальная температура)
// 09:00 Температура_на_улице = -28.1 (минимальная температура первого дня)
// 17:00 Температура_на_улице = -13.8 (максимальная температура первого дня)
// 00:00 Температура_на_улице = -20.1 (температура к концу первого дня)
//
// за 10 дней моделирования:
//Температура_на_улице = -21,5
sequence рандом_дня = new Uniform(123, -0.0002, 0.0008);
sequence рандом_ночи = new Uniform(123, -0.0006, 0.0001);

sequence рандом_давления_газа_к_котлу = new Uniform(123, -0.001, 0.002);
sequence рандом_давления_газа_к_газовой_горелке = new Normal(123, 30, 0.01); 
sequence рандом_насос_в_12_часов = new Normal(123, 0.014, 0.0001);
sequence рандом_насос = new Uniform(123, -0.005, 0.01);

sequence сенсор_пожара = new Values(#[0]); // 0 - нет пожара, 1 - пожар

def init() {
    Время_моделирования.plan(1);
    Собираемые_показатели.plan(0)
}

def terminateCondition() {
    return currentTime > 86400;
}

event Время_моделирования() {
    Время_моделирования.plan(currentTime + 1);
    
    часы.секунда = часы.секунда + 1;
    if (часы.секунда == 60){
    	часы.секунда = 0;
    	часы.минута = часы.минута + 1;
    	if (часы.минута == 60){
    		часы.секунда = 0;
    		часы.минута = 0;
    		часы.час = часы.час + 1;
    		if (часы.час == 24){
    			часы.секунда = 0;
    			часы.минута = 0;
    			часы.час = 0;
    			часы.день = часы.день + 1; // 1 день = 86400 секунд
    		}
    	
    	}
    }
}

event Собираемые_показатели() {
	Собираемые_показатели.plan(currentTime + 1);
	if (часы.час >= 9 && часы.час <= 17) {
		улица.температура_double = улица.температура_double + рандом_дня.next();
		улица.температура_string = Double.toString(улица.температура_double);
	}
	else{
		улица.температура_double = улица.температура_double + рандом_ночи.next();
		улица.температура_string = Double.toString(улица.температура_double);
	}
	
	газ_к_котлу.давление_double = газ_к_котлу.давление_double + рандом_давления_газа_к_котлу.next();
    газ_к_котлу.давление_string = Double.toString(газ_к_котлу.давление_double);
 
    газ_к_газовой_горелке.давление_double = рандом_давления_газа_к_газовой_горелке.next();
    газ_к_газовой_горелке.давление_string = Double.toString(газ_к_газовой_горелке.давление_double);
    
    // В 12:00 горячая вода спускается на охлаждение стоков и в сеть поступает холодная. К 13:00 Т = 20 каждый день.
    if (часы.час == 12 && вода_входа_в_котел.температура_double > 20) {
    	вода_входа_в_котел.температура_double = вода_входа_в_котел.температура_double - рандом_насос_в_12_часов.next();
    	вода_входа_в_котел.температура_string = Double.toString(вода_входа_в_котел.температура_double);
    }
    else {
    	вода_входа_в_котел.температура_double = вода_входа_в_котел.температура_double + рандом_насос.next();
    	if (вода_входа_в_котел.температура_double > 70) {
    		вода_входа_в_котел.температура_double = 70 + рандом_насос.next();
    	}
    	вода_входа_в_котел.температура_string = Double.toString(вода_входа_в_котел.температура_double);
    }
    
    вода_выхода_из_котла.температура_double = (10 - улица.температура_double)/3.33 + 91;
    вода_выхода_из_котла.температура_string = Double.toString(вода_выхода_из_котла.температура_double);
    
    газовая_горелка.мощность_double = 30 - улица.температура_double;
    газовая_горелка.мощность_string = Double.toString(газовая_горелка.мощность_double);
    
    if (currentTime % период_опроса == 0 &&
    	окно_состояний.состояние_котельной != Состояние_котельной.Пожар &&
    	окно_состояний.состояние_котельной != Состояние_котельной.Критическое_давление
    ) {
    	Работа_котла.plan(currentTime);
    }
}
	
event Работа_котла() {
	if (сенсор_пожара.next() == 1) {
		Пожар.plan(currentTime);
		окно_состояний.состояние_котельной = Состояние_котельной.Пожар;
}
	
	else if (газ_к_котлу.давление_double > 340) {
		Критическое_давление.plan(currentTime);
		окно_состояний.состояние_котельной = Состояние_котельной.Критическое_давление;
	}
	
	else {
		окно_состояний.состояние_котельной = Состояние_котельной.Все_системы_функционируют;
		газовая_горелка.состояние_газовой_горелки = Состояние_газовой_горелки.Горит;
		клапан_ввода_газа_к_котлу.состояние_клапана = Состояние_клапана.Открыт;
		клапан_вывода_газа_в_атмосферу.состояние_клапана = Состояние_клапана.Закрыт;
		клапан_ввода_газа_к_газовой_горелке.состояние_клапана = Состояние_клапана.Открыт;
		клапан_ввода_воздуха_к_газовой_горелке.состояние_клапана = Состояние_клапана.Открыт;
		клапан_выхода_воды_из_котла.состояние_клапана = Состояние_клапана.Открыт;
		клапан_входа_воды_в_котел.состояние_клапана = Состояние_клапана.Открыт;
		вентилятор_горелки.состояние_вентилятора = Состояние_вентилятора.Включен;
		
		if (вода_входа_в_котел.температура_double < 40) {
			клапан_входа_воды_в_насос.состояние_клапана = Состояние_клапана.Открыт;
			клапан_выхода_воды_из_насоса.состояние_клапана = Состояние_клапана.Открыт;
			насос_котла.состояние_насоса = Состояние_насоса.Включен;
		}
		if (вода_входа_в_котел.температура_double >= 40 && вода_входа_в_котел.температура_double <= 50) {
			if (насос_котла.состояние_насоса == Состояние_насоса.Включен) {
				клапан_входа_воды_в_насос.состояние_клапана = Состояние_клапана.Открыт;
				клапан_выхода_воды_из_насоса.состояние_клапана = Состояние_клапана.Открыт;
				насос_котла.состояние_насоса = Состояние_насоса.Включен;
			}
			if (насос_котла.состояние_насоса == Состояние_насоса.Выключен) {
				клапан_входа_воды_в_насос.состояние_клапана = Состояние_клапана.Закрыт;
				клапан_выхода_воды_из_насоса.состояние_клапана = Состояние_клапана.Закрыт;
				насос_котла.состояние_насоса = Состояние_насоса.Выключен;
			}
		}
		if (вода_входа_в_котел.температура_double > 50) {
			клапан_входа_воды_в_насос.состояние_клапана = Состояние_клапана.Закрыт;
			клапан_выхода_воды_из_насоса.состояние_клапана = Состояние_клапана.Закрыт;
			насос_котла.состояние_насоса = Состояние_насоса.Выключен;
		}
	}
}

event Пожар() {
	газовая_горелка.состояние_газовой_горелки = Состояние_газовой_горелки.Не_горит;
	клапан_ввода_газа_к_котлу.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_вывода_газа_в_атмосферу.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_ввода_газа_к_газовой_горелке.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_ввода_воздуха_к_газовой_горелке.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_выхода_воды_из_котла.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_входа_воды_в_котел.состояние_клапана = Состояние_клапана.Закрыт;
	вентилятор_горелки.состояние_вентилятора = Состояние_вентилятора.Выключен;
	клапан_входа_воды_в_насос.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_выхода_воды_из_насоса.состояние_клапана = Состояние_клапана.Закрыт;
	насос_котла.состояние_насоса = Состояние_насоса.Выключен;
}

event Критическое_давление() {
	газовая_горелка.состояние_газовой_горелки = Состояние_газовой_горелки.Не_горит;
	клапан_ввода_газа_к_котлу.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_вывода_газа_в_атмосферу.состояние_клапана = Состояние_клапана.Открыт;
	клапан_ввода_газа_к_газовой_горелке.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_ввода_воздуха_к_газовой_горелке.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_выхода_воды_из_котла.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_входа_воды_в_котел.состояние_клапана = Состояние_клапана.Закрыт;
	вентилятор_горелки.состояние_вентилятора = Состояние_вентилятора.Выключен;
	клапан_входа_воды_в_насос.состояние_клапана = Состояние_клапана.Закрыт;
	клапан_выхода_воды_из_насоса.состояние_клапана = Состояние_клапана.Закрыт;
	насос_котла.состояние_насоса = Состояние_насоса.Выключен;
}

frame Имя_кадра {

    def init() {
        background = new Background(1100, 544, RaoColor.WHITE);
    }
    
    def draw() {
        drawImage("images/Фон.png", 0, 0);
        
        if (газовая_горелка.состояние_газовой_горелки == Состояние_газовой_горелки.Горит) {
            drawImage("images/Газовая_горелка_горит.png", 584, 329);
        }
        else {
            drawImage("images/Газовая_горелка_не_горит.png", 584, 329);
        }
            
        if (клапан_ввода_газа_к_котлу.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_горизонтальный.png", 112, 352);
        }
        else {
            drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 352);
        }
            
        if (клапан_вывода_газа_в_атмосферу.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_вертикальный.png", 314, 397);
        }
        else {
            drawImage("images/Клапан_закрыт_вертикальный.png", 314, 397);
        }
                    
        if (клапан_ввода_газа_к_газовой_горелке.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_горизонтальный.png", 499, 352);
        }
        else {
            drawImage("images/Клапан_закрыт_горизонтальный.png", 499, 352);
        }
            
        if (клапан_ввода_воздуха_к_газовой_горелке.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_горизонтальный.png", 919, 370);
        }
        else {
            drawImage("images/Клапан_закрыт_горизонтальный.png", 919, 370);
        }
            
        if (клапан_выхода_воды_из_котла.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_горизонтальный.png", 112, 232);
        }
        else {
            drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 232);
        }
            
        if (клапан_входа_воды_в_котел.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_горизонтальный.png", 112, 38);
        }
        else {
            drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 38);
        }
               
        if (вентилятор_горелки.состояние_вентилятора == Состояние_вентилятора.Включен) {
            drawImage("images/Вентилятор_включен.png", 786, 355);
        }
        else {
            drawImage("images/Вентилятор_выключен.png", 786, 355);
        }
            
        if (клапан_входа_воды_в_насос.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_вертикальный.png", 250, 176);
        }
        else {
            drawImage("images/Клапан_закрыт_вертикальный.png", 250, 176);
        }
            
        if (клапан_выхода_воды_из_насоса.состояние_клапана == Состояние_клапана.Открыт) {
        	drawImage("images/Клапан_открыт_вертикальный.png", 568, 70);
        }
        else {
            drawImage("images/Клапан_закрыт_вертикальный.png", 568, 70);
        }
        
        if (насос_котла.состояние_насоса == Состояние_насоса.Включен) {
        	drawImage("images/Насос_включен.png", 385, 128);
        }
        else {
            drawImage("images/Насос_выключен.png", 385, 128);
            }
            
        drawText("DD - hh:mm:ss", 832, 70, RaoColor.WHITE, 0, Alignment.LEFT);
        drawText(Integer.toString(часы.день), 840, 90, RaoColor.WHITE, 0, Alignment.LEFT);  
        drawText("-", 850, 90, RaoColor.WHITE, 0, Alignment.LEFT); 
        drawText(Integer.toString(часы.час), 860, 90, RaoColor.WHITE, 0, Alignment.LEFT);
        drawText(":", 875, 90, RaoColor.WHITE, 0, Alignment.LEFT);
        drawText(Integer.toString(часы.минута), 880, 90, RaoColor.WHITE, 0, Alignment.LEFT);
        drawText(":", 895, 90, RaoColor.WHITE, 0, Alignment.LEFT);
        drawText(Integer.toString(часы.секунда), 900, 90, RaoColor.WHITE, 0, Alignment.LEFT);
        
        if (окно_состояний.состояние_котельной == Состояние_котельной.Все_системы_функционируют) {
        	drawText("Все системы функционируют!", 830, 110, RaoColor.WHITE, 0, Alignment.LEFT);
        	drawImage("images/Все_системы_функционируют.png", 825, 132);
        	
        	drawText("Р = ", 226, 341, RaoColor.BLACK, 0, Alignment.LEFT);
        	drawText(газ_к_котлу.давление_string, 248, 341, RaoColor.BLACK, 0, Alignment.LEFT);
        	
        	drawText("Р = ", 395, 341, RaoColor.BLACK, 0, Alignment.LEFT);
        	drawText(газ_к_газовой_горелке.давление_string, 417, 341, RaoColor.BLACK, 0, Alignment.LEFT);
        
        	drawText("T = ", 401, 28, RaoColor.BLACK, 0, Alignment.LEFT);
        	drawText(вода_входа_в_котел.температура_string, 423, 28, RaoColor.BLACK, 0, Alignment.LEFT);
        
        	drawText("T = ", 401, 222, RaoColor.BLACK, 0, Alignment.LEFT);
        	drawText(вода_выхода_из_котла.температура_string, 423, 222, RaoColor.BLACK, 0, Alignment.LEFT);
        
        	drawText("T = ", 140, 480, RaoColor.BLACK, 0, Alignment.LEFT);
        	drawText(улица.температура_string, 162, 480, RaoColor.BLACK, 0, Alignment.LEFT);
        
        	drawText("W = ", 673, 290, RaoColor.BLACK, 0, Alignment.LEFT);
        	drawText(газовая_горелка.мощность_string, 698, 290, RaoColor.BLACK, 0, Alignment.LEFT);
        	val bodyColor = new RaoColor((2.55 * газовая_горелка.мощность_double).intValue(), 20, 20);
        	drawRectangle(690, 250 - (газовая_горелка.мощность_double * 1.95).intValue(), 15, (газовая_горелка.мощность_double * 1.95).intValue(), bodyColor, RaoColor.WHITE)
        }
        
        if (окно_состояний.состояние_котельной == Состояние_котельной.Критическое_давление) {
        	drawText("ВНИМАНИЕ! Критическое давление!", 830, 110, RaoColor.WHITE, 0, Alignment.LEFT);
        	drawImage("images/Выход_газа_в_атмосферу.png", 825, 132);
        	drawImage("images/Котел_выключен.png", 641, 12);
        }
        
        if (окно_состояний.состояние_котельной == Состояние_котельной.Пожар) {
        	drawText("ВНИМАНИЕ! ПОЖАР!", 830, 110, RaoColor.WHITE, 0, Alignment.LEFT);
        	drawImage("images/Пожар.png", 825, 132);
        	drawImage("images/Котел_выключен.png", 641, 12);
        }
    }
}