enum Состояние_режима {Активен, Неактивен}
type Режим_получения_и_обработки_данных {
	Состояние_режима состояние;
}

type Режим_растопки_котла {
	Состояние_режима состояние;
}

type Режим_штатной_работы_котла {
	Состояние_режима состояние;
}

type Режим_пожара_в_котельной {
	Состояние_режима состояние;
}

type Улица {
	double температура; // [°С]
	String температура_string; // [°С]
}

type Газ {
	double давление_к_котлу; // [кПа]
	String давление_к_котлу_string; // [кПа]
	double давление_к_газовой_горелке; // [кПа]
	String давление_к_газовой_горелке_string; // [кПа]
}

type Вода {
	double температура_прямой_воды; // [°С]
	String температура_прямой_воды_string; // [°С]
	double расчетная_температура_прямой_воды; // [°С]
	double температура_обратной_воды; // [°С]
	String температура_обратной_воды_string; // [°С]
	double расчетная_температура_обратной_воды; // [°С]
	double температура_обратной_воды_перед_котлом; // [°С]
	String температура_обратной_воды_перед_котлом_string; // [°С]
	double удельная_теплоемкость; // [Дж/(кг*°С)]
}

type Котел {
	double текущая_мощность; // [Вт]
	double текущая_мощность_в_процентах; // [%]
	String текущая_мощность_в_процентах_string; // [%]
	double максимальная_мощность; // [Вт]
	double расчетная_мощность; // [Вт]
	double максимальная_скорость_растопки; // [°С/с]
	double максимальная_скорость_работы; // [Вт/с]
	double масса_нагреваемой_воды_за_секунду; // [кг/с]
	double максимальная_разность_температур_воды; // [°С]
}

type Часы {
	int день; // [день]
	int час; // [час]
	int минута; // [мин]
	int секунда; // [сек]
}

enum Состояние_анимации {Растопка_котла, Штатная_работа_котла, Пожар_в_котельной}
type Анимация {
	Состояние_анимации состояние;
}

resource режим_получения_и_обработки_данных = Режим_получения_и_обработки_данных.create(Состояние_режима.Активен);
resource режим_растопки_котла = Режим_растопки_котла.create(Состояние_режима.Активен);
resource режим_штатной_работы_котла = Режим_штатной_работы_котла.create(Состояние_режима.Неактивен);
resource режим_пожара_в_котельной = Режим_пожара_в_котельной.create(Состояние_режима.Неактивен);
resource газ = Газ.create(300, "300", 30, "30");
resource вода = Вода.create(5, "5", 5, 5, "5", 5, 5, "5", 4200);
resource улица = Улица.create(-46, "-46");
resource котел = Котел.create(0, 0, "0", 1680000, 0, 0.0083, 10000, 10, 40);
resource часы = Часы.create(0, 0, 0, 0);
resource анимация = Анимация.create(Состояние_анимации.Растопка_котла);

sequence потепление = new Uniform(123, -0.0002, 0.0008); // [°С]
sequence похолодание = new Uniform(123, -0.0006, 0.0001); // [°С]
sequence ликвидация_пожара = new Uniform(123, 3600, 7200);

constant период_опроса_системы = 1; // [cек]

def terminateCondition() {
	return currentTime > 14000; // 1 день = 86400 секунд
}

operation Получение_и_обработка_данных() {
	relevant режим_получения_и_обработки_данных = Режим_получения_и_обработки_данных.accessible.filter [
		состояние == Состояние_режима.Активен
	].any;

	def duration() {
		return 1;
	}

	def end() {
		часы.секунда = часы.секунда + 1;
		if (часы.секунда == 60) {
			часы.секунда = 0;
			часы.минута = часы.минута + 1;
			if (часы.минута == 60) {
				часы.секунда = 0;
				часы.минута = 0;
				часы.час = часы.час + 1;
				if (часы.час == 24) {
					часы.секунда = 0;
					часы.минута = 0;
					часы.час = 0;
					часы.день = часы.день + 1;
				}
			}
		}

		if (часы.час >= 9 && часы.час <= 17) {
			улица.температура = улица.температура + потепление.next();
		} else {
			улица.температура = улица.температура + похолодание.next();
		}

		газ.давление_к_котлу = 300;
		газ.давление_к_газовой_горелке = 30;

		вода.расчетная_температура_прямой_воды = 59.28 - 0.99 * улица.температура;
		вода.расчетная_температура_обратной_воды = 45.04 - 0.54 * улица.температура;
		if (вода.расчетная_температура_прямой_воды > 115) {
			вода.расчетная_температура_прямой_воды = 115;
			вода.расчетная_температура_обратной_воды = 100.76 + 0.45 * улица.температура;
		}
		if (вода.расчетная_температура_прямой_воды - вода.расчетная_температура_обратной_воды >
			котел.максимальная_разность_температур_воды) {
			вода.расчетная_температура_прямой_воды = вода.расчетная_температура_обратной_воды +
				котел.максимальная_разность_температур_воды;
		}

		котел.расчетная_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
			(вода.расчетная_температура_прямой_воды - вода.расчетная_температура_обратной_воды);
	}
}

operation Растопка_котла() {
	relevant режим_растопки_котла = Режим_растопки_котла.accessible.filter [
		состояние == Состояние_режима.Активен
	].any;

	def duration() {
		return 1;
	}

	def end() {
		вода.температура_обратной_воды = вода.температура_прямой_воды -
			(вода.расчетная_температура_прямой_воды - вода.расчетная_температура_обратной_воды);
		if (вода.температура_обратной_воды < 5) {
			вода.температура_обратной_воды = 5;
		}

		вода.температура_обратной_воды_перед_котлом = (вода.температура_прямой_воды + вода.температура_обратной_воды) /
			2;

		if (вода.температура_прямой_воды < вода.расчетная_температура_прямой_воды) {
			вода.температура_прямой_воды = вода.температура_прямой_воды + котел.максимальная_скорость_растопки;
		} else {
			режим_штатной_работы_котла.состояние = Состояние_режима.Активен;
			режим_растопки_котла.состояние = Состояние_режима.Неактивен;
		}

		котел.текущая_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
			(вода.температура_прямой_воды - вода.температура_обратной_воды_перед_котлом);

		if (currentTime % период_опроса_системы == 0 || currentTime == 1) {
			улица.температура_string = Double.toString(улица.температура);
			газ.давление_к_котлу_string = Double.toString(газ.давление_к_котлу);
			газ.давление_к_газовой_горелке_string = Double.toString(газ.давление_к_газовой_горелке);
			вода.температура_прямой_воды_string = Double.toString(вода.температура_прямой_воды);
			вода.температура_обратной_воды_string = Double.toString(вода.температура_обратной_воды);
			вода.температура_обратной_воды_перед_котлом_string = Double.toString(
				вода.температура_обратной_воды_перед_котлом);
			котел.текущая_мощность_в_процентах = котел.текущая_мощность / котел.максимальная_мощность * 100;
			котел.текущая_мощность_в_процентах_string = Double.toString(котел.текущая_мощность_в_процентах);

			анимация.состояние = Состояние_анимации.Растопка_котла;
		}
	}
}

operation Штатная_работа_котла() {
	relevant режим_штатной_работы_котла = Режим_штатной_работы_котла.accessible.filter [
		состояние == Состояние_режима.Активен
	].any;

	def duration() {
		return 1;
	}

	def end() {
		if (вода.температура_прямой_воды < вода.расчетная_температура_прямой_воды) {
			вода.температура_обратной_воды = вода.расчетная_температура_обратной_воды;
		} else {
			вода.температура_обратной_воды = вода.температура_прямой_воды -
				(вода.расчетная_температура_прямой_воды - вода.расчетная_температура_обратной_воды);
		}

		if (котел.текущая_мощность + котел.максимальная_скорость_работы > котел.расчетная_мощность &&
			котел.текущая_мощность - котел.максимальная_скорость_работы < котел.расчетная_мощность) {
			котел.текущая_мощность = котел.расчетная_мощность;
		} else if (котел.текущая_мощность < котел.расчетная_мощность) {
			котел.текущая_мощность = котел.текущая_мощность + котел.максимальная_скорость_работы;
		} else {
			котел.текущая_мощность = котел.текущая_мощность - котел.максимальная_скорость_работы;
		}

		вода.температура_обратной_воды_перед_котлом = вода.температура_обратной_воды;

		вода.температура_прямой_воды = котел.текущая_мощность / вода.удельная_теплоемкость /
			котел.масса_нагреваемой_воды_за_секунду + вода.температура_обратной_воды_перед_котлом;

		if (currentTime % период_опроса_системы == 0 || currentTime == 1) {
			улица.температура_string = Double.toString(улица.температура);
			газ.давление_к_котлу_string = Double.toString(газ.давление_к_котлу);
			газ.давление_к_газовой_горелке_string = Double.toString(газ.давление_к_газовой_горелке);
			вода.температура_прямой_воды_string = Double.toString(вода.температура_прямой_воды);
			вода.температура_обратной_воды_string = Double.toString(вода.температура_обратной_воды);
			вода.температура_обратной_воды_перед_котлом_string = Double.toString(
				вода.температура_обратной_воды_перед_котлом);
			котел.текущая_мощность_в_процентах = котел.текущая_мощность / котел.максимальная_мощность * 100;
			котел.текущая_мощность_в_процентах_string = Double.toString(котел.текущая_мощность_в_процентах);

			анимация.состояние = Состояние_анимации.Штатная_работа_котла;
		}
	}
}

operation Пожар_в_котельной() {
	relevant режим_растопки_котла = Режим_растопки_котла.accessible.filter [
		состояние == Состояние_режима.Неактивен
	].any;
	relevant режим_штатной_работа_котла = Режим_штатной_работы_котла.accessible.filter [
		состояние == Состояние_режима.Неактивен
	].any;
	relevant режим_пожара_в_котельной = Режим_пожара_в_котельной.accessible.filter [
		состояние == Состояние_режима.Активен
	].any;

	def begin() {
		режим_пожара_в_котельной.состояние = Состояние_режима.Неактивен;

		улица.температура_string = "n/a";
		газ.давление_к_котлу_string = "n/a";
		газ.давление_к_газовой_горелке_string = "n/a";
		вода.температура_прямой_воды_string = "n/a";
		вода.температура_обратной_воды_string = "n/a";
		вода.температура_обратной_воды_перед_котлом_string = "n/a";
		котел.текущая_мощность_в_процентах = 0;
		котел.текущая_мощность_в_процентах_string = "n/a";

		анимация.состояние = Состояние_анимации.Пожар_в_котельной;
	}

	def duration() {
		return (ликвидация_пожара.next()).intValue();
	}

	def end() {
		газ.давление_к_котлу = 300;
		газ.давление_к_газовой_горелке = 30;

		вода.температура_прямой_воды = 5;
		вода.температура_обратной_воды = 5;
		котел.текущая_мощность = 0;

		режим_растопки_котла.состояние = Состояние_режима.Активен;
	}
}

logic Котельная {
	activity получение_и_обработка_данных = new Activity(Получение_и_обработка_данных.create());
	activity растопка_котла = new Activity(Растопка_котла.create());
	activity штатная_работа_котла = new Activity(Штатная_работа_котла.create());
	activity пожар_в_котельной = new Activity(Пожар_в_котельной.create());
}

frame Анимация_котельной {
	def init() {
		background = new Background(1100, 544, RaoColor.WHITE);
	}

	def draw() {
		drawImage("images/Фон.png", 0, 0);

		drawText("дд - чч:мм:сс", 832, 70, RaoColor.WHITE);
		drawText(Integer.toString(часы.день), 840, 90, RaoColor.WHITE);
		drawText("-", 850, 90, RaoColor.WHITE);
		drawText(Integer.toString(часы.час), 860, 90, RaoColor.WHITE);
		drawText(":", 875, 90, RaoColor.WHITE);
		drawText(Integer.toString(часы.минута), 880, 90, RaoColor.WHITE);
		drawText(":", 895, 90, RaoColor.WHITE);
		drawText(Integer.toString(часы.секунда), 900, 90, RaoColor.WHITE);

		drawText("T = ", 140, 480, RaoColor.BLACK);
		drawText(улица.температура_string, 162, 480, RaoColor.BLACK);

		drawText("Р = ", 226, 341, RaoColor.BLACK);
		drawText(газ.давление_к_котлу_string, 248, 341, RaoColor.BLACK);

		drawText("Р = ", 395, 341, RaoColor.BLACK);
		drawText(газ.давление_к_газовой_горелке_string, 417, 341, RaoColor.BLACK);

		drawText("T = ", 186, 222, RaoColor.BLACK);
		drawText(вода.температура_прямой_воды_string, 208, 222, RaoColor.BLACK);

		drawText("T = ", 186, 28, RaoColor.BLACK);
		drawText(вода.температура_обратной_воды_string, 208, 28, RaoColor.BLACK);

		drawText("T = ", 553, 28, RaoColor.BLACK);
		drawText(вода.температура_обратной_воды_перед_котлом_string, 575, 28, RaoColor.BLACK);

		drawText("W = ", 673, 290, RaoColor.BLACK);
		drawText(котел.текущая_мощность_в_процентах_string, 698, 290, RaoColor.BLACK);
		val bodyColor = new RaoColor((2.55 * котел.текущая_мощность_в_процентах).intValue(), 20, 20);
		drawRectangle(690, 250 - (котел.текущая_мощность_в_процентах * 1.95).intValue(), 15,
			(котел.текущая_мощность_в_процентах * 1.95).intValue(), bodyColor, RaoColor.WHITE);

		if (анимация.состояние == Состояние_анимации.Растопка_котла) {
			drawText("Режим растопки котла", 830, 110, RaoColor.WHITE);
			drawImage("images/Все_системы_функционируют.png", 825, 132);
			drawImage("images/Газовая_горелка_горит.png", 584, 329);
			drawImage("images/Клапан_открыт_горизонтальный.png", 112, 352);
			drawImage("images/Клапан_закрыт_вертикальный.png", 314, 397);
			drawImage("images/Клапан_открыт_горизонтальный.png", 499, 352);
			drawImage("images/Клапан_открыт_горизонтальный.png", 919, 370);
			drawImage("images/Клапан_открыт_горизонтальный.png", 112, 232);
			drawImage("images/Клапан_открыт_горизонтальный.png", 112, 38);
			drawImage("images/Вентилятор_включен.png", 786, 355);
			drawImage("images/Насос_включен.png", 385, 128);
			drawImage("images/Клапан_открыт_вертикальный.png", 326, 176);
			drawImage("images/Клапан_открыт_вертикальный.png", 495, 70);
		}

		if (анимация.состояние == Состояние_анимации.Штатная_работа_котла) {
			drawText("Режим штатной работы котла", 830, 110, RaoColor.WHITE);
			drawImage("images/Все_системы_функционируют.png", 825, 132);
			drawImage("images/Газовая_горелка_горит.png", 584, 329);
			drawImage("images/Клапан_открыт_горизонтальный.png", 112, 352);
			drawImage("images/Клапан_закрыт_вертикальный.png", 314, 397);
			drawImage("images/Клапан_открыт_горизонтальный.png", 499, 352);
			drawImage("images/Клапан_открыт_горизонтальный.png", 919, 370);
			drawImage("images/Клапан_открыт_горизонтальный.png", 112, 232);
			drawImage("images/Клапан_открыт_горизонтальный.png", 112, 38);
			drawImage("images/Вентилятор_включен.png", 786, 355);
			drawImage("images/Насос_выключен.png", 385, 128);
			drawImage("images/Клапан_закрыт_вертикальный.png", 326, 176);
			drawImage("images/Клапан_закрыт_вертикальный.png", 495, 70);
		}

		if (анимация.состояние == Состояние_анимации.Пожар_в_котельной) {
			drawText("ПОЖАР!!!", 830, 110, RaoColor.WHITE);
			drawImage("images/Пожар.png", 825, 132);
			drawImage("images/Котел_выключен.png", 641, 12);
			drawImage("images/Газовая_горелка_не_горит.png", 584, 329);
			drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 352);
			drawImage("images/Клапан_открыт_вертикальный.png", 314, 397);
			drawImage("images/Клапан_закрыт_горизонтальный.png", 499, 352);
			drawImage("images/Клапан_закрыт_горизонтальный.png", 919, 370);
			drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 232);
			drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 38);
			drawImage("images/Вентилятор_выключен.png", 786, 355);
			drawImage("images/Насос_выключен.png", 385, 128);
			drawImage("images/Клапан_закрыт_вертикальный.png", 326, 176);
			drawImage("images/Клапан_закрыт_вертикальный.png", 495, 70);
		}
	}

	def mouseDown(int x, int y, int button, int stateMask) {
		if (x > 638 && y > 473 && x < 779 && y < 513) {
			режим_растопки_котла.состояние = Состояние_режима.Неактивен;
			режим_штатной_работы_котла.состояние = Состояние_режима.Неактивен;
			режим_пожара_в_котельной.состояние = Состояние_режима.Активен;
		}
	}
}
