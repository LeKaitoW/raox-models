enum Состояние_режима {Активен, Неактивен}
type Режим_получения_и_обработки_данных {
	Состояние_режима состояние
}

type Режим_растопки_котла {
	Состояние_режима состояние
}

type Режим_штатной_работы_котла {
	Состояние_режима состояние
}

type Режим_пожара_в_котельной {
	Состояние_режима состояние
}

type Улица {
	double температура // [°С]
}

type Газ {
	double давление_к_котлу // [кПа]
	double давление_к_газовой_горелке // [кПа]
}

type Вода {
	double температура_прямой_воды // [°С]
	double расчетная_температура_прямой_воды // [°С]
	double температура_обратной_воды // [°С]
	double расчетная_температура_обратной_воды // [°С]
	double расчетная_разница_температур_воды_от_потребителя // [°С]
	double температура_обратной_воды_перед_котлом // [°С]
	double удельная_теплоемкость // [Дж/(кг*°С)]
}

type Котел {
	double текущая_мощность // [Вт]
	double текущая_мощность_в_процентах // [%]
	double максимальная_мощность // [Вт]
	double расчетная_мощность // [Вт]
	double максимальная_скорость_растопки // [°С/с]
	double максимальная_скорость_работы // [Вт/с]
	double масса_нагреваемой_воды_за_секунду // [кг/с]
	double максимальная_температура_прямой_воды // [°С]
	double максимальная_разность_температур_воды // [°С]
}

type Часы {
	int день // [день]
	int час // [час]
	int минута // [мин]
	int секунда // [с]
}

enum Состояние_анимации {Растопка_котла, Штатная_работа_котла, Пожар_в_котельной}
type Анимация {
	Состояние_анимации состояние
}

resource режим_получения_и_обработки_данных = Режим_получения_и_обработки_данных.create(Состояние_режима.Активен)
resource режим_растопки_котла = Режим_растопки_котла.create(Состояние_режима.Активен)
resource режим_штатной_работы_котла = Режим_штатной_работы_котла.create(Состояние_режима.Неактивен)
resource режим_пожара_в_котельной = Режим_пожара_в_котельной.create(Состояние_режима.Неактивен)
resource газ = Газ.create(300, 30)
resource вода = Вода.create(5, 5, 5, 5, 0, 5, 4200)
resource улица = Улица.create(-30)
resource котел = Котел.create(0, 0, 1680000, 0, 0.0083, 1000, 10, 115, 40)
resource часы = Часы.create(0, 0, 0, 0)
resource анимация = Анимация.create(Состояние_анимации.Растопка_котла)

sequence потепление = new Normal(1231, 0.0002, 0.00001) // [°С]
sequence похолодание = new Normal(1232, -0.00015, 0.00001) // [°С]
sequence ликвидация_пожара = new Uniform(1233, 3600, 7200) // [c]
sequence давление_газа_к_котлу = new Normal(1234, 300, 0.01) // [кПа]
sequence давление_газа_к_газовой_горелке = new Normal(1235, 30, 0.01) // [кПа]
sequence температура_холодной_воды = new Normal(1236, 5, 0.01) // [°С]
sequence максимальная_температура_прямой_воды = new Normal(1237, 115, 0.01) // [°С]
constant период_опроса_системы = 1 // [c]
def terminateCondition() {
	return currentTime > 2592000 // 30 [дней] = 2592000 [с]
}

operation Получение_и_обработка_данных() {
	relevant режим_получения_и_обработки_данных = Режим_получения_и_обработки_данных.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def duration() {
		return 1
	}

	def end() {
		часы.секунда = часы.секунда + 1
		if (часы.секунда == 60) {
			часы.секунда = 0
			часы.минута = часы.минута + 1
			if (часы.минута == 60) {
				часы.секунда = 0
				часы.минута = 0
				часы.час = часы.час + 1
				if (часы.час == 24) {
					часы.секунда = 0
					часы.минута = 0
					часы.час = 0
					часы.день = часы.день + 1
				}
			}
		}

		if (часы.час >= 9 && часы.час <= 18) {
			улица.температура = улица.температура + потепление.next()
		} else {
			улица.температура = улица.температура + похолодание.next()
		}

		газ.давление_к_котлу = давление_газа_к_котлу.next()
		газ.давление_к_газовой_горелке = давление_газа_к_газовой_горелке.next()

		вода.расчетная_температура_прямой_воды = 59.28 - 0.99 * улица.температура
		вода.расчетная_температура_обратной_воды = 45.04 - 0.54 * улица.температура
		вода.расчетная_разница_температур_воды_от_потребителя = вода.расчетная_температура_прямой_воды -
			вода.расчетная_температура_обратной_воды

		if (вода.расчетная_температура_прямой_воды > котел.максимальная_температура_прямой_воды) {
			вода.расчетная_температура_прямой_воды = максимальная_температура_прямой_воды.next()
			вода.расчетная_температура_обратной_воды = котел.максимальная_температура_прямой_воды -
				вода.расчетная_разница_температур_воды_от_потребителя
		}
		котел.расчетная_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
			(вода.расчетная_температура_прямой_воды - вода.расчетная_температура_обратной_воды)
	}
}

operation Растопка_котла() {
	relevant режим_растопки_котла = Режим_растопки_котла.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def duration() {
		return 1
	}

	def end() {
		вода.температура_обратной_воды = вода.температура_прямой_воды -
			(вода.расчетная_температура_прямой_воды - вода.расчетная_температура_обратной_воды)
		if (вода.температура_обратной_воды < температура_холодной_воды.next()) {
			вода.температура_обратной_воды = температура_холодной_воды.next()
		}

		вода.температура_обратной_воды_перед_котлом = (вода.температура_прямой_воды + вода.температура_обратной_воды) /
			2

		if (вода.температура_прямой_воды < вода.расчетная_температура_прямой_воды) {
			вода.температура_прямой_воды = вода.температура_прямой_воды + котел.максимальная_скорость_растопки
		} else {
			режим_штатной_работы_котла.состояние = Состояние_режима.Активен
			режим_растопки_котла.состояние = Состояние_режима.Неактивен
		}

		котел.текущая_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
			(вода.температура_прямой_воды - вода.температура_обратной_воды_перед_котлом)

		if (currentTime % период_опроса_системы == 0 || currentTime == 1) {
			котел.текущая_мощность_в_процентах = котел.текущая_мощность / котел.максимальная_мощность * 100
			анимация.состояние = Состояние_анимации.Растопка_котла
		}
	}
}

operation Штатная_работа_котла() {
	relevant режим_штатной_работы_котла = Режим_штатной_работы_котла.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def duration() {
		return 1
	}

	def end() {
		вода.температура_обратной_воды = вода.расчетная_температура_обратной_воды

		if (котел.текущая_мощность + котел.максимальная_скорость_работы > котел.расчетная_мощность &&
			котел.текущая_мощность - котел.максимальная_скорость_работы < котел.расчетная_мощность) {
			котел.текущая_мощность = котел.расчетная_мощность
		} else if (котел.текущая_мощность < котел.расчетная_мощность) {
			котел.текущая_мощность = котел.текущая_мощность + котел.максимальная_скорость_работы
		} else {
			котел.текущая_мощность = котел.текущая_мощность - котел.максимальная_скорость_работы
		}

		вода.температура_обратной_воды_перед_котлом = вода.температура_обратной_воды

		вода.температура_прямой_воды = котел.текущая_мощность / вода.удельная_теплоемкость /
			котел.масса_нагреваемой_воды_за_секунду + вода.температура_обратной_воды_перед_котлом

		if (currentTime % период_опроса_системы == 0 || currentTime == 1) {
			котел.текущая_мощность_в_процентах = котел.текущая_мощность / котел.максимальная_мощность * 100
			анимация.состояние = Состояние_анимации.Штатная_работа_котла
		}
	}
}

operation Пожар_в_котельной() {
	relevant режим_растопки_котла = Режим_растопки_котла.accessible.filter [
		состояние == Состояние_режима.Неактивен
	].any
	relevant режим_штатной_работа_котла = Режим_штатной_работы_котла.accessible.filter [
		состояние == Состояние_режима.Неактивен
	].any
	relevant режим_пожара_в_котельной = Режим_пожара_в_котельной.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def begin() {
		котел.текущая_мощность_в_процентах = 0
		анимация.состояние = Состояние_анимации.Пожар_в_котельной
	}

	def duration() {
		return (ликвидация_пожара.next()).intValue()
	}

	def end() {
		газ.давление_к_котлу = давление_газа_к_котлу.next()
		газ.давление_к_газовой_горелке = давление_газа_к_газовой_горелке.next()

		вода.температура_прямой_воды = температура_холодной_воды.next()
		вода.температура_обратной_воды = температура_холодной_воды.next()

		режим_пожара_в_котельной.состояние = Состояние_режима.Неактивен
		режим_растопки_котла.состояние = Состояние_режима.Активен
	}
}

logic Котельная {
	activity получение_и_обработка_данных = new Activity(Получение_и_обработка_данных.create())
	activity растопка_котла = new Activity(Растопка_котла.create())
	activity штатная_работа_котла = new Activity(Штатная_работа_котла.create())
	activity пожар_в_котельной = new Activity(Пожар_в_котельной.create())
}

frame Анимация_котельной {
	def init() {
		background = new Background(1100, 544, RaoColor.WHITE)
	}

	def draw() {
		switch (анимация.состояние) {
			case Состояние_анимации.Растопка_котла: {
				drawImage("images/Режим_растопки_котла.png", 0, 0)
				drawText("Режим_растопки_котла", 830, 110, RaoColor.WHITE)

				drawText(String.format("%.2f", улица.температура), 156, 480, RaoColor.BLACK)
				drawText(String.format("%.3f", газ.давление_к_котлу), 241, 341, RaoColor.BLACK)
				drawText(String.format("%.3f", газ.давление_к_газовой_горелке), 413, 341, RaoColor.BLACK)
				drawText(String.format("%.2f", вода.температура_прямой_воды), 246, 222, RaoColor.BLACK)
				drawText(String.format("%.2f", вода.температура_обратной_воды), 247, 28, RaoColor.BLACK)
				drawText(String.format("%.2f", вода.температура_обратной_воды_перед_котлом), 575, 28, RaoColor.BLACK)
				drawText(String.format("%.2f", котел.текущая_мощность_в_процентах), 698, 290, RaoColor.BLACK)
				val bodyColor = new RaoColor((2.55 * котел.текущая_мощность_в_процентах).intValue(), 20, 20)
				drawRectangle(690, 250 - (котел.текущая_мощность_в_процентах * 1.95).intValue(), 15,
					(котел.текущая_мощность_в_процентах * 1.95).intValue(), bodyColor, RaoColor.WHITE)
			}
			case Состояние_анимации.Штатная_работа_котла: {
				drawImage("images/Режим_штатной_работы_котла.png", 0, 0)
				drawText("Режим_штатной_работы_котла", 830, 110, RaoColor.WHITE)

				drawText(String.format("%.2f", улица.температура), 156, 480, RaoColor.BLACK)
				drawText(String.format("%.3f", газ.давление_к_котлу), 242, 341, RaoColor.BLACK)
				drawText(String.format("%.3f", газ.давление_к_газовой_горелке), 413, 341, RaoColor.BLACK)
				drawText(String.format("%.2f", вода.температура_прямой_воды), 246, 222, RaoColor.BLACK)
				drawText(String.format("%.2f", вода.температура_обратной_воды), 247, 28, RaoColor.BLACK)
				drawText(String.format("%.2f", вода.температура_обратной_воды_перед_котлом), 575, 28, RaoColor.BLACK)
				drawText(String.format("%.2f", котел.текущая_мощность_в_процентах), 698, 290, RaoColor.BLACK)
				val bodyColor = new RaoColor((2.55 * котел.текущая_мощность_в_процентах).intValue(), 20, 20)
				drawRectangle(690, 250 - (котел.текущая_мощность_в_процентах * 1.95).intValue(), 15,
					(котел.текущая_мощность_в_процентах * 1.95).intValue(), bodyColor, RaoColor.WHITE)
			}
			case Состояние_анимации.Пожар_в_котельной: {
				drawImage("images/Режим_пожара_в_котельной.png", 0, 0)
				drawText("ПОЖАР!!!", 830, 110, RaoColor.WHITE)

				drawText(String.format("n/a"), 159, 480, RaoColor.BLACK)
				drawText(String.format("n/a"), 244, 341, RaoColor.BLACK)
				drawText(String.format("n/a"), 415, 341, RaoColor.BLACK)
				drawText(String.format("n/a"), 244, 222, RaoColor.BLACK)
				drawText(String.format("n/a"), 244, 28, RaoColor.BLACK)
				drawText(String.format("n/a"), 575, 28, RaoColor.BLACK)
			}
		}

		drawText("дд - чч:мм:сс", 832, 70, RaoColor.WHITE)
		drawText(Integer.toString(часы.день), 840, 90, RaoColor.WHITE)
		drawText("-", 850, 90, RaoColor.WHITE)
		drawText(Integer.toString(часы.час), 860, 90, RaoColor.WHITE)
		drawText(":", 875, 90, RaoColor.WHITE)
		drawText(Integer.toString(часы.минута), 880, 90, RaoColor.WHITE)
		drawText(":", 895, 90, RaoColor.WHITE)
		drawText(Integer.toString(часы.секунда), 900, 90, RaoColor.WHITE)

		drawText("T = ", 134, 480, RaoColor.BLACK)
		drawText("Р = ", 219, 341, RaoColor.BLACK)
		drawText("Р = ", 391, 341, RaoColor.BLACK)
		drawText("T = ", 224, 222, RaoColor.BLACK)
		drawText("T = ", 225, 28, RaoColor.BLACK)
		drawText("T = ", 553, 28, RaoColor.BLACK)
		drawText("W = ", 673, 290, RaoColor.BLACK)
	}

	def mouseDown(int x, int y, int button, int stateMask) {
		if (x > 638 && y > 473 && x < 779 && y < 513) {
			режим_растопки_котла.состояние = Состояние_режима.Неактивен
			режим_штатной_работы_котла.состояние = Состояние_режима.Неактивен
			режим_пожара_в_котельной.состояние = Состояние_режима.Активен
		}
	}
}
