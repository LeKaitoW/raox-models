enum Состояние_режима {Активен, Неактивен}
type Режим_получения_и_обработки_данных {
	Состояние_режима состояние
}

type Режим_растопки_котла {
	Состояние_режима состояние
}

type Режим_штатной_работы_котла {
	Состояние_режима состояние
}

type Режим_пожара_в_котельной {
	Состояние_режима состояние
}

type Улица {
	double температура // [°С]
}

type Газ {
	double давление_к_котлу // [кПа]
	double давление_к_газовой_горелке // [кПа]
}

type Вода {
	double температура_прямой_воды // [°С]
	double расчетная_температура_прямой_воды // [°С]
	double температура_обратной_воды // [°С]
	double расчетная_температура_обратной_воды // [°С]
	double расчетная_разность_температур_воды_от_потребителя // [°С]
	double температура_обратной_воды_перед_котлом // [°С]
	double удельная_теплоемкость // [Дж/(кг*°С)]
}

type Котел {
	double текущая_мощность // [Вт]
	double текущая_мощность_в_процентах // [%]
	double максимальная_мощность // [Вт]
	double расчетная_мощность // [Вт]
	double максимальная_скорость_растопки // [°С/с]
	double максимальная_скорость_работы // [Вт/с]
	double масса_нагреваемой_воды_за_секунду // [кг/с]
	double максимальная_температура_прямой_воды // [°С]
	double минимальная_температура_обратной_воды // [°С]
	double максимальная_разность_температур_воды // [°С]
	double критическая_температура_на_улице // [°С]
	double период_водоворота // [c]
}

type Часы {
	int день // [день]
	int час // [час]
	int минута // [мин]
	int секунда // [с]
}

enum Состояние_анимации {Растопка_котла, Штатная_работа_котла, Пожар_в_котельной}
type Анимация {
	Состояние_анимации состояние
	int период_опроса_системы // [c]
	String температура_на_улице // [°С]
	Состояние_режима режим_критической_температуры_на_улице
	String давление_газа_к_котлу // [кПа]
	String давление_газа_к_газовой_горелке // [кПа]
	String температура_прямой_воды // [°С]
	String температура_обратной_воды // [°С]
	String температура_обратной_воды_перед_котлом // [°С]
	String текущая_мощность_в_процентах // [%] 
}

resource режим_получения_и_обработки_данных = Режим_получения_и_обработки_данных.create(Состояние_режима.Активен)
resource режим_растопки_котла = Режим_растопки_котла.create(Состояние_режима.Активен)
resource режим_штатной_работы_котла = Режим_штатной_работы_котла.create(Состояние_режима.Неактивен)
resource режим_пожара_в_котельной = Режим_пожара_в_котельной.create(Состояние_режима.Неактивен)
resource газ = Газ.create(300, 30)
resource вода = Вода.create(5, 5, 5, 5, 0, 5, 4200)
resource улица = Улица.create(-30)
resource котел = Котел.create(0, 0, 1680000, 0, 0.0083, 10000, 10, 115, 5, 40, 0, 1000)
resource часы = Часы.create(1, 0, 0, 0)
resource анимация = Анимация.create(Состояние_анимации.Растопка_котла, 1, "-30", Состояние_режима.Неактивен, "300",
	"30", "5", "5", "5", "0")

sequence потепление = new Normal(1231, 0.0002, 0.00001) // [°С]
sequence похолодание = new Normal(1232, -0.00015, 0.00001) // [°С]
sequence ликвидация_пожара = new Uniform(1233, 3600, 172800) // [c]
sequence давление_газа_к_котлу = new Normal(1234, 300, 0.01) // [кПа]
sequence давление_газа_к_газовой_горелке = new Normal(1235, 30, 0.01) // [кПа]
sequence минимальная_температура_обратной_воды = new Normal(1236, 5, 0.01) // [°С]
constant константа_прямой_воды_1_из_температурного_графика = 59.28
constant константа_прямой_воды_2_из_температурного_графика = 0.99
constant константа_обратной_воды_1_из_температурного_графика = 45.04
constant константа_обратной_воды_2_из_температурного_графика = 0.54

def terminateCondition() {
	return currentTime > 2592000 // 30 [дней] = 2592000 [с]
}

operation Получение_и_обработка_данных() {
	relevant режим_получения_и_обработки_данных = Режим_получения_и_обработки_данных.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def duration() {
		return 1
	}

	def end() {
		часы.секунда = часы.секунда + 1
		if (часы.секунда == 60) {
			часы.секунда = 0
			часы.минута = часы.минута + 1
			if (часы.минута == 60) {
				часы.секунда = 0
				часы.минута = 0
				часы.час = часы.час + 1
				if (часы.час == 24) {
					часы.секунда = 0
					часы.минута = 0
					часы.час = 0
					часы.день = часы.день + 1
				}
			}
		}

		if (часы.час >= 9 && часы.час <= 18) {
			улица.температура = улица.температура + потепление.next()
		} else {
			улица.температура = улица.температура + похолодание.next()
		}

		газ.давление_к_котлу = давление_газа_к_котлу.next()
		газ.давление_к_газовой_горелке = давление_газа_к_газовой_горелке.next()

		вода.расчетная_температура_прямой_воды = константа_прямой_воды_1_из_температурного_графика -
			константа_прямой_воды_2_из_температурного_графика * улица.температура
		вода.расчетная_температура_обратной_воды = константа_обратной_воды_1_из_температурного_графика -
			константа_обратной_воды_2_из_температурного_графика * улица.температура

		вода.расчетная_разность_температур_воды_от_потребителя = вода.расчетная_температура_прямой_воды -
			вода.расчетная_температура_обратной_воды

		if (вода.расчетная_температура_прямой_воды > котел.максимальная_температура_прямой_воды) {
			вода.расчетная_температура_прямой_воды = котел.максимальная_температура_прямой_воды
		}

		котел.критическая_температура_на_улице = (котел.максимальная_разность_температур_воды -
			константа_прямой_воды_1_из_температурного_графика + константа_обратной_воды_1_из_температурного_графика) /
			(константа_обратной_воды_2_из_температурного_графика - константа_прямой_воды_2_из_температурного_графика)
	}
}

operation Растопка_котла() {
	relevant режим_растопки_котла = Режим_растопки_котла.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def duration() {
		return 1
	}

	def end() {
		вода.температура_обратной_воды = вода.температура_прямой_воды -
			котел.период_водоворота * котел.максимальная_скорость_растопки -
			вода.расчетная_разность_температур_воды_от_потребителя
		if (вода.температура_обратной_воды < котел.минимальная_температура_обратной_воды) {
			вода.температура_обратной_воды = минимальная_температура_обратной_воды.next()
		}

		if (вода.температура_прямой_воды < вода.расчетная_температура_прямой_воды) {
			вода.температура_обратной_воды_перед_котлом = (вода.температура_прямой_воды +
				вода.температура_обратной_воды) / 2

			вода.температура_прямой_воды = вода.температура_прямой_воды + котел.максимальная_скорость_растопки

			котел.текущая_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
				(вода.температура_прямой_воды - вода.температура_обратной_воды_перед_котлом)
		} else {
			вода.температура_обратной_воды_перед_котлом = вода.температура_обратной_воды

			вода.температура_прямой_воды = котел.текущая_мощность / вода.удельная_теплоемкость /
				котел.масса_нагреваемой_воды_за_секунду + вода.температура_обратной_воды_перед_котлом

			режим_штатной_работы_котла.состояние = Состояние_режима.Активен
			режим_растопки_котла.состояние = Состояние_режима.Неактивен
		}

		if (котел.текущая_мощность > котел.максимальная_мощность) {
			котел.текущая_мощность = котел.максимальная_мощность
			вода.температура_прямой_воды = котел.текущая_мощность / вода.удельная_теплоемкость /
				котел.масса_нагреваемой_воды_за_секунду + вода.температура_обратной_воды_перед_котлом
		}

		if (currentTime % анимация.период_опроса_системы == 0 || currentTime == 1) {
			анимация.состояние = Состояние_анимации.Растопка_котла
			анимация.температура_на_улице = String.format("%.2f", улица.температура)
			if (улица.температура > котел.критическая_температура_на_улице) {
				анимация.режим_критической_температуры_на_улице = Состояние_режима.Неактивен
			} else {
				анимация.режим_критической_температуры_на_улице = Состояние_режима.Активен
			}
			анимация.давление_газа_к_котлу = String.format("%.3f", газ.давление_к_котлу)
			анимация.давление_газа_к_газовой_горелке = String.format("%.3f", газ.давление_к_газовой_горелке)
			анимация.температура_прямой_воды = String.format("%.2f", вода.температура_прямой_воды)
			анимация.температура_обратной_воды = String.format("%.2f", вода.температура_обратной_воды)
			анимация.температура_обратной_воды_перед_котлом = String.format("%.2f",
				вода.температура_обратной_воды_перед_котлом)
			котел.текущая_мощность_в_процентах = котел.текущая_мощность / котел.максимальная_мощность * 100
			анимация.текущая_мощность_в_процентах = String.format("%.2f", котел.текущая_мощность_в_процентах)
		}
	}
}

operation Штатная_работа_котла() {
	relevant режим_штатной_работы_котла = Режим_штатной_работы_котла.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def duration() {
		return 1
	}

	def end() {
		if (улица.температура > котел.критическая_температура_на_улице) {
			if (котел.период_водоворота > 0) {
				котел.период_водоворота = котел.период_водоворота - 1
				if (котел.период_водоворота < 1) {
					котел.период_водоворота = 0
				}
				вода.температура_обратной_воды = вода.расчетная_температура_прямой_воды -
					котел.период_водоворота * котел.максимальная_скорость_растопки -
					вода.расчетная_разность_температур_воды_от_потребителя
				} else {
				вода.температура_обратной_воды = вода.температура_прямой_воды -
					вода.расчетная_разность_температур_воды_от_потребителя
			}
			if (вода.температура_обратной_воды < котел.минимальная_температура_обратной_воды) {
				вода.температура_обратной_воды = минимальная_температура_обратной_воды.next()
			}

			вода.температура_обратной_воды_перед_котлом = вода.температура_обратной_воды

			котел.расчетная_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
				вода.расчетная_разность_температур_воды_от_потребителя

			if (вода.температура_прямой_воды < вода.расчетная_температура_прямой_воды) {
				if (котел.текущая_мощность == котел.максимальная_мощность) {
					котел.текущая_мощность = котел.максимальная_мощность
				} else {
					котел.текущая_мощность = котел.текущая_мощность + котел.максимальная_скорость_работы
					if (котел.текущая_мощность > котел.максимальная_мощность) {
						котел.текущая_мощность = котел.максимальная_мощность
					}
				}
				вода.температура_прямой_воды = котел.текущая_мощность / вода.удельная_теплоемкость /
					котел.масса_нагреваемой_воды_за_секунду + вода.температура_обратной_воды
			}

			if (вода.температура_прямой_воды >= вода.расчетная_температура_прямой_воды) {
				вода.температура_прямой_воды = вода.расчетная_температура_прямой_воды
				котел.текущая_мощность = вода.удельная_теплоемкость * котел.масса_нагреваемой_воды_за_секунду *
					(вода.температура_прямой_воды - вода.температура_обратной_воды_перед_котлом)
			}

		} else {
			if (котел.период_водоворота > 0) {
				котел.период_водоворота = котел.период_водоворота - 1
				if (котел.период_водоворота < 1) {
					котел.период_водоворота = 0
				}
				вода.температура_обратной_воды = вода.расчетная_температура_прямой_воды -
					котел.период_водоворота * котел.максимальная_скорость_растопки -
					вода.расчетная_разность_температур_воды_от_потребителя
			} else {
				вода.температура_обратной_воды = вода.температура_прямой_воды -
					вода.расчетная_разность_температур_воды_от_потребителя
			}

			if (вода.температура_обратной_воды < котел.минимальная_температура_обратной_воды) {
				вода.температура_обратной_воды = минимальная_температура_обратной_воды.next()
			}

			вода.температура_обратной_воды_перед_котлом = вода.температура_обратной_воды

			котел.текущая_мощность = котел.текущая_мощность + котел.максимальная_скорость_работы
			if (котел.текущая_мощность > котел.максимальная_мощность) {
				котел.текущая_мощность = котел.максимальная_мощность
			}

			вода.температура_прямой_воды = котел.текущая_мощность / вода.удельная_теплоемкость /
				котел.масса_нагреваемой_воды_за_секунду + вода.температура_обратной_воды
		}

		if (currentTime % анимация.период_опроса_системы == 0 || currentTime == 1) {
			анимация.состояние = Состояние_анимации.Штатная_работа_котла
			анимация.температура_на_улице = String.format("%.2f", улица.температура)
			if (улица.температура > котел.критическая_температура_на_улице) {
				анимация.режим_критической_температуры_на_улице = Состояние_режима.Неактивен
			} else {
				анимация.режим_критической_температуры_на_улице = Состояние_режима.Активен
			}
			анимация.давление_газа_к_котлу = String.format("%.3f", газ.давление_к_котлу)
			анимация.давление_газа_к_газовой_горелке = String.format("%.3f", газ.давление_к_газовой_горелке)
			анимация.температура_прямой_воды = String.format("%.2f", вода.температура_прямой_воды)
			анимация.температура_обратной_воды = String.format("%.2f", вода.температура_обратной_воды)
			анимация.температура_обратной_воды_перед_котлом = String.format("%.2f",
				вода.температура_обратной_воды_перед_котлом)
			котел.текущая_мощность_в_процентах = котел.текущая_мощность / котел.максимальная_мощность * 100
			анимация.текущая_мощность_в_процентах = String.format("%.2f", котел.текущая_мощность_в_процентах)
		}
	}
}

operation Пожар_в_котельной() {
	relevant режим_растопки_котла = Режим_растопки_котла.accessible.filter [
		состояние == Состояние_режима.Неактивен
	].any
	relevant режим_штатной_работа_котла = Режим_штатной_работы_котла.accessible.filter [
		состояние == Состояние_режима.Неактивен
	].any
	relevant режим_пожара_в_котельной = Режим_пожара_в_котельной.accessible.filter [
		состояние == Состояние_режима.Активен
	].any

	def begin() {
		котел.текущая_мощность_в_процентах = 0
		анимация.состояние = Состояние_анимации.Пожар_в_котельной
		анимация.температура_на_улице = "n/a"
		анимация.давление_газа_к_котлу = "n/a"
		анимация.давление_газа_к_газовой_горелке = "n/a"
		анимация.температура_прямой_воды = "n/a"
		анимация.температура_обратной_воды = "n/a"
		анимация.температура_обратной_воды_перед_котлом = "n/a"
		анимация.текущая_мощность_в_процентах = "n/a"
	}

	def duration() {
		return (ликвидация_пожара.next()).intValue()
	}

	def end() {
		котел.период_водоворота = 1000

		вода.температура_прямой_воды = минимальная_температура_обратной_воды.next()
		вода.температура_обратной_воды = минимальная_температура_обратной_воды.next()

		режим_пожара_в_котельной.состояние = Состояние_режима.Неактивен
		режим_растопки_котла.состояние = Состояние_режима.Активен
	}
}

logic Котельная {
	activity получение_и_обработка_данных = new Activity(Получение_и_обработка_данных.create())
	activity растопка_котла = new Activity(Растопка_котла.create())
	activity штатная_работа_котла = new Activity(Штатная_работа_котла.create())
	activity пожар_в_котельной = new Activity(Пожар_в_котельной.create())
}

frame Анимация_котельной {
	def init() {
		background = new Background(1100, 544, RaoColor.WHITE)
	}

	def draw() {
		drawImage("images/Фон.png", 0, 0)

		drawText(Integer.toString(часы.день), 912, 34, RaoColor.BLACK)
		drawText(" / 12 / 16", 925, 34, RaoColor.BLACK)

		drawText(Integer.toString(часы.час), 912, 54, RaoColor.BLACK)
		drawText(":", 928, 54, RaoColor.BLACK)
		drawText(Integer.toString(часы.минута), 935, 54, RaoColor.BLACK)
		drawText(":", 951, 54, RaoColor.BLACK)
		drawText(Integer.toString(часы.секунда), 958, 54, RaoColor.BLACK)

		drawText("T = ", 125, 479, RaoColor.BLACK)
		drawText("Р = ", 186, 340, RaoColor.BLACK)
		drawText("Р = ", 394, 340, RaoColor.BLACK)
		drawText("T = ", 186, 220, RaoColor.BLACK)
		drawText("T = ", 186, 26, RaoColor.BLACK)
		drawText("T = ", 538, 26, RaoColor.BLACK)
		drawText("W = ", 660, 275, RaoColor.BLACK)

		drawText(анимация.температура_на_улице, 147, 479, RaoColor.BLACK)
		drawText(анимация.давление_газа_к_котлу, 208, 340, RaoColor.BLACK)
		drawText(анимация.давление_газа_к_газовой_горелке, 416, 340, RaoColor.BLACK)
		drawText(анимация.температура_прямой_воды, 208, 220, RaoColor.BLACK)
		drawText(анимация.температура_обратной_воды, 208, 26, RaoColor.BLACK)
		drawText(анимация.температура_обратной_воды_перед_котлом, 560, 26, RaoColor.BLACK)
		drawText(анимация.текущая_мощность_в_процентах, 686, 275, RaoColor.BLACK)
		val bodyColor = new RaoColor((2.55 * котел.текущая_мощность_в_процентах).intValue(), 20, 20)
		drawRectangle(690, 250 - (котел.текущая_мощность_в_процентах * 1.95).intValue(), 15,
			(котел.текущая_мощность_в_процентах * 1.95).intValue(), bodyColor, RaoColor.WHITE)

		switch (анимация.состояние) {
			case Состояние_анимации.Растопка_котла: {
				drawImage("images/Включен_режим_растопки_котла.png", 853, 125)
				drawImage("images/Насос_котла_включен.png", 853, 177)
				if (анимация.режим_критической_температуры_на_улице == Состояние_режима.Активен) {
					drawImage("images/Критическое_значение_температуры_на_улице.png", 853, 229)
				} else {
					drawImage("images/Значение_температуры_на_улице_в_норме.png", 853, 229)
				}

				drawImage("images/Газовая_горелка_горит.png", 584, 329)
				drawImage("images/Клапан_открыт_горизонтальный.png", 112, 352)
				drawImage("images/Клапан_закрыт_вертикальный.png", 314, 397)
				drawImage("images/Клапан_открыт_горизонтальный.png", 499, 352)
				drawImage("images/Клапан_открыт_горизонтальный.png", 919, 370)
				drawImage("images/Клапан_открыт_горизонтальный.png", 112, 232)
				drawImage("images/Клапан_открыт_горизонтальный.png", 112, 38)
				drawImage("images/Вентилятор_включен.png", 786, 355)
				drawImage("images/Насос_включен.png", 385, 128)
				drawImage("images/Клапан_открыт_вертикальный.png", 326, 176)
				drawImage("images/Клапан_открыт_вертикальный.png", 495, 70)
			}
			case Состояние_анимации.Штатная_работа_котла: {
				drawImage("images/Включен_режим_штатной_работы_котла.png", 853, 125)
				drawImage("images/Насос_котла_выключен.png", 853, 177)
				if (анимация.режим_критической_температуры_на_улице == Состояние_режима.Активен) {
					drawImage("images/Критическое_значение_температуры_на_улице.png", 853, 229)
				} else {
					drawImage("images/Значение_температуры_на_улице_в_норме.png", 853, 229)
				}

				drawImage("images/Газовая_горелка_горит.png", 584, 329)
				drawImage("images/Клапан_открыт_горизонтальный.png", 112, 352)
				drawImage("images/Клапан_закрыт_вертикальный.png", 314, 397)
				drawImage("images/Клапан_открыт_горизонтальный.png", 499, 352)
				drawImage("images/Клапан_открыт_горизонтальный.png", 919, 370)
				drawImage("images/Клапан_открыт_горизонтальный.png", 112, 232)
				drawImage("images/Клапан_открыт_горизонтальный.png", 112, 38)
				drawImage("images/Вентилятор_включен.png", 786, 355)
				drawImage("images/Насос_выключен.png", 385, 128)
				drawImage("images/Клапан_закрыт_вертикальный.png", 326, 176)
				drawImage("images/Клапан_закрыт_вертикальный.png", 495, 70)
			}
			case Состояние_анимации.Пожар_в_котельной: {
				drawImage("images/Включен_режим_пожара_в_котельной.png", 853, 177)

				drawImage("images/Газовая_горелка_не_горит.png", 584, 329)
				drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 352)
				drawImage("images/Клапан_открыт_вертикальный.png", 314, 397)
				drawImage("images/Клапан_закрыт_горизонтальный.png", 499, 352)
				drawImage("images/Клапан_закрыт_горизонтальный.png", 919, 370)
				drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 232)
				drawImage("images/Клапан_закрыт_горизонтальный.png", 112, 38)
				drawImage("images/Вентилятор_выключен.png", 786, 355)
				drawImage("images/Вентилятор_включен.png", 786, 355)
				drawImage("images/Насос_выключен.png", 385, 128)
				drawImage("images/Клапан_закрыт_вертикальный.png", 326, 176)
				drawImage("images/Клапан_закрыт_вертикальный.png", 495, 70)
			}
		}
	}

	def mouseDown(int x, int y, int button, int stateMask) {
		if (x > 715 && y > 467 && x < 895 && y < 506) {
			режим_растопки_котла.состояние = Состояние_режима.Неактивен
			режим_штатной_работы_котла.состояние = Состояние_режима.Неактивен
			режим_пожара_в_котельной.состояние = Состояние_режима.Активен
		}
	}
}
		