import java.util.Arrays

type Позиция {
	int количество_маркеров;
}

type Переход {
	Позиция[] входы;
	Позиция[] выходы;
	int длительность_перехода;
}

resource робот_свободен = Позиция.create(1);

resource наличие_заготовки_в_накопителе = Позиция.create(0);
resource заготовка_установлена_на_первом_станке = Позиция.create(0);
resource заготовка_обработана_на_первом_станке = Позиция.create(0);
resource первый_станок_свободен = Позиция.create(1);

resource заготовка_установлена_на_втором_станке = Позиция.create(0);
resource заготовка_обработана_на_втором_станке = Позиция.create(0);
resource второй_станок_свободен = Позиция.create(1);
resource наличие_обработанной_заготовки_в_накопителе = Позиция.create(0);

resource загрузка_первого_станка = Переход.create(
	Arrays.asList(робот_свободен, первый_станок_свободен, наличие_заготовки_в_накопителе),
	Arrays.asList(робот_свободен, заготовка_установлена_на_первом_станке), 66);
resource обработка_на_первом_станке = Переход.create(Arrays.asList(заготовка_установлена_на_первом_станке),
	Arrays.asList(заготовка_обработана_на_первом_станке), 600);
resource переустановка = Переход.create(
	Arrays.asList(робот_свободен, заготовка_обработана_на_первом_станке, второй_станок_свободен),
	Arrays.asList(робот_свободен, заготовка_установлена_на_втором_станке, первый_станок_свободен), 44);
resource обработка_на_втором_станке = Переход.create(Arrays.asList(заготовка_установлена_на_втором_станке),
	Arrays.asList(заготовка_обработана_на_втором_станке), 1200);
resource разгрузка_второго_станка = Переход.create(Arrays.asList(заготовка_обработана_на_втором_станке, робот_свободен),
	Arrays.asList(робот_свободен, наличие_обработанной_заготовки_в_накопителе, второй_станок_свободен), 22);

boolean проверка_массива(Позиция[] позиции) {
	var количество_позиций_с_маркерами = 0
	for (позиция : позиции) {
		if (позиция.количество_маркеров > 0)
			количество_позиций_с_маркерами = количество_позиций_с_маркерами + 1;
	}
	return количество_позиций_с_маркерами == позиции.length
}

event Событие_прихода_заготовки(){
	Событие_прихода_заготовки.plan(currentTime + интервал_прихода.next());
	наличие_заготовки_в_накопителе.количество_маркеров = наличие_заготовки_в_накопителе.количество_маркеров + 1;
}

operation Срабатывание_перехода() {

	relevant _переход = Переход.accessible.filter[проверка_массива(входы)].any;

	def begin() {
		_переход.входы.forEach[количество_маркеров = количество_маркеров - 1]
	}

	def duration() {
		return _переход.длительность_перехода;
	}

	def end() {
		_переход.выходы.forEach[количество_маркеров = количество_маркеров + 1]
	}
}

sequence интервал_прихода = new Exponential(123456789, 1 / 60.0);

logic Модель {
	activity сеть_Петри = new Activity(Срабатывание_перехода.create());
}

def init() {
	Событие_прихода_заготовки.plan(интервал_прихода.next())
}

def terminateCondition() {
	return наличие_обработанной_заготовки_в_накопителе.количество_маркеров == 10;
}
