enum Состояние_буксира {Стоит_у_очереди, Идет_к_причалам, Стоит_у_причалов, Идет_к_очереди}
enum Номер_причала {_1, _2, _3} // костыыыль
enum Состояние_причала {Свободен, Занят}
enum Состояние_шторма {Спокоен, Штормит, Начался}
enum Тип_танкера {Тип1, Тип2, Тип3}
enum Состояние_танкера {Пришел, Буксируется_к_причалам, Ожидает_у_причалов, Заполняется, Заполнен, Буксируется_от_причалов, Ушел}

constant ширина = 350
constant высота = 600
constant высота_границы_очереди = высота / 3
constant высота_границы_причалов = 5 * высота / 6

type Порт {
	int количество_в_очереди;
	int номер_крайнего_танкера;
}

type Буксиры {
	Состояние_буксира состояние;
	int количество_обслуженных;
	int номер_танкера;
	/* Анимация */
	int размер;
	int X;
	int Y;
	RaoColor цвет;
}

type Танкеры {
	Тип_танкера тип;
	Состояние_танкера состояние;
	double время_прихода;
	int порядковый_номер;
}

type Причалы {
	Номер_причала номер;
	Состояние_причала состояние;
	int количество_обслуженных_причалом;
	Тип_танкера тип_танкера;
}

type Штормы {
	Состояние_шторма состояние;
	RaoColor цвет;
}


resource порт = Порт.create(0, 0)
//resource буксир = Буксиры.create(Состояние_буксира.Стоит_у_очереди, 0, 0, 30, ширина / 2, высота_границы_очереди, RaoColor.GREEN);
resource шторм = Штормы.create(Состояние_шторма.Спокоен, RaoColor.GRAY);


sequence интервал_прихода1 = new Values(#[10]);
sequence интервал_прихода2 = new Values(#[15]);
sequence интервал_прихода3 = new Values(#[20]);
sequence длительность_буксирования = new Values(#[5]);
sequence длительность_заполнения1 = new Values(#[31]);
sequence длительность_заполнения2 = new Values(#[32]);
sequence длительность_заполнения3 = new Values(#[33]);
sequence периодичность_шторма = new Values(#[90]);
sequence длительность_шторма = new Values(#[20]);

event Событие_прихода_танкера1() {
	Танкеры.create(Тип_танкера.Тип1, Состояние_танкера.Пришел, currentTime, порт.номер_крайнего_танкера + 1);
	Событие_прихода_танкера1.plan(currentTime + интервал_прихода1.next());
	порт.количество_в_очереди = порт.количество_в_очереди + 1;
	порт.номер_крайнего_танкера = порт.номер_крайнего_танкера + 1;
}

event Событие_прихода_танкера2() {
	Танкеры.create(Тип_танкера.Тип2, Состояние_танкера.Пришел, currentTime, порт.номер_крайнего_танкера + 1);
	Событие_прихода_танкера2.plan(currentTime + интервал_прихода2.next());
	порт.количество_в_очереди = порт.количество_в_очереди + 1;
	порт.номер_крайнего_танкера = порт.номер_крайнего_танкера + 1;
}

event Событие_прихода_танкера3() {
	Танкеры.create(Тип_танкера.Тип3, Состояние_танкера.Пришел, currentTime, порт.номер_крайнего_танкера + 1);
	Событие_прихода_танкера3.plan(currentTime + интервал_прихода3.next());
	порт.количество_в_очереди = порт.количество_в_очереди + 1;
	порт.номер_крайнего_танкера = порт.номер_крайнего_танкера + 1;
}


event Событие_начала_шторма() {
	шторм.состояние = Состояние_шторма.Начался;
	Событие_начала_шторма.plan(currentTime + периодичность_шторма.next());
}


operation Образец_шторма() {
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Начался];

	def duration() {
		return длительность_шторма.next();
	}
	def begin() {
		_шторм.состояние = Состояние_шторма.Штормит;
	}
	def end() {
		_шторм.состояние = Состояние_шторма.Спокоен;		
	}
}

operation Образец_буксирования_пустого_танкера() {
	relevant _порт = порт.onlyif[количество_в_очереди > 0];
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Спокоен];
	relevant буксир = Буксиры.accessible.filter[состояние == Состояние_буксира.Стоит_у_очереди].any;
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Пришел].minBySafe[время_прихода];
	relevant причал = Причалы.accessible.filter[состояние == Состояние_причала.Свободен].any;

	def duration() {
		return длительность_буксирования.next();
	}
	def begin() {
		порт.количество_в_очереди = порт.количество_в_очереди - 1;
		буксир.состояние = Состояние_буксира.Идет_к_причалам;
		буксир.номер_танкера = танкер.порядковый_номер;
		танкер.состояние = Состояние_танкера.Буксируется_к_причалам;
		
		/* Анимация */
		буксир._Y = высота_границы_очереди + буксир.размер / 2; // на полкорпуса ниже границы очереди
	}
	def end() {
		буксир.состояние = Состояние_буксира.Стоит_у_причалов;
		танкер.состояние = Состояние_танкера.Ожидает_у_причалов;
		
		/* Анимация */
		буксир._Y = высота_границы_причалов - 3 * буксир.размер / 2;
	}
}


operation Образец_заполнения_танкера() {
	//relevant _буксир = буксир.onlyif[состояние_буксира == Состояние_буксира.Стоит_у_причала]; 					// ?зачем?
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Ожидает_у_причалов].any; 
	relevant причал = Причалы.accessible.filter[состояние == Состояние_причала.Свободен].any;	
	
	def duration(){
		switch танкер.тип {
		case Тип_танкера.Тип1:
			return длительность_заполнения1.next()
		case Тип_танкера.Тип2:
			return длительность_заполнения2.next()
		case Тип_танкера.Тип3:
			return длительность_заполнения3.next()
		}
	}

	def begin() {
		причал.состояние = Состояние_причала.Занят;
		танкер.состояние = Состояние_танкера.Заполняется;
		причал.тип_танкера = танкер.тип;
	}
	def end() {
		причал.состояние = Состояние_причала.Свободен;
		причал.количество_обслуженных_причалом = причал.количество_обслуженных_причалом + 1;
		танкер.состояние = Состояние_танкера.Заполнен;
	}
}


operation Образец_буксирования_заполненного_танкера() {
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Спокоен];
	relevant буксир = Буксиры.accessible.filter[состояние == Состояние_буксира.Стоит_у_причалов].any;
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Заполнен].any;		

	def duration() {
		return длительность_буксирования.next();
	}
	def begin() {
		буксир.состояние = Состояние_буксира.Идет_к_очереди;
		буксир.номер_танкера = танкер.порядковый_номер;
		танкер.состояние = Состояние_танкера.Буксируется_от_причалов;
		
		/* Анимация */
		буксир._Y = высота_границы_причалов - 3 * буксир.размер / 2; 
	}
	def end() {
		буксир.состояние = Состояние_буксира.Стоит_у_очереди;
		буксир.количество_обслуженных =  буксир.количество_обслуженных + 1;
		танкер.состояние == Состояние_танкера.Ушел;
		/*
		def execute(){
			_Танкер.erase();
		}
		*/
		/* Анимация */
		буксир._Y = высота_границы_очереди + буксир.размер / 2;
	}
}


operation Образец_перемещения_пустого_буксира_к_очереди() {
	relevant _порт = порт.onlyif[количество_в_очереди > 0];
	relevant _шторм = шторм.onlyif[состояние == Состояние_шторма.Спокоен];
	relevant буксир = Буксиры.accessible.filter[состояние == Состояние_буксира.Стоит_у_причалов].any;
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Пришел].any;
	relevant причал = Причалы.accessible.filter[состояние == Состояние_причала.Свободен].any;	
	
	def duration() {
		return длительность_буксирования.next();
	}
	def begin() {
		буксир.состояние = Состояние_буксира.Идет_к_очереди;
		буксир.номер_танкера = 0;
		
		/* Анимация */
		буксир._Y = высота_границы_причалов - 3 * буксир.размер / 2;
	}
	def end() {
		буксир.состояние = Состояние_буксира.Стоит_у_очереди;
		
		/* Анимация */
		буксир._Y = высота_границы_очереди + буксир.размер / 2;
	}
}


logic Работа_модели {
	activity буксирование_танкера_к_причалу = new Activity(Образец_буксирования_пустого_танкера.create());
	activity заполнение_танкера = new Activity(Образец_заполнения_танкера.create());
	activity буксирование_танкера_от_причала = new Activity(Образец_буксирования_заполненного_танкера.create());
	activity штормление = new Activity(Образец_шторма.create());
	activity возвращение_буксира_к_очереди = new Activity(Образец_перемещения_пустого_буксира_к_очереди.create());
}

def init() {
	Timer.plan(currentTime + 1);
	Причалы.create(Номер_причала._1, Состояние_причала.Свободен, 0, null);
	Причалы.create(Номер_причала._2, Состояние_причала.Свободен, 0, null);
	Причалы.create(Номер_причала._3, Состояние_причала.Свободен, 0, null);
	Буксиры.create(Состояние_буксира.Стоит_у_очереди, 0, 0, 30, ширина / 2, высота_границы_очереди, RaoColor.GREEN);
	Событие_прихода_танкера1.plan(currentTime + интервал_прихода1.next());
	Событие_прихода_танкера2.plan(currentTime + интервал_прихода2.next());
	Событие_прихода_танкера3.plan(currentTime + интервал_прихода3.next());
	Событие_начала_шторма.plan(currentTime + периодичность_шторма.next());   
	//log(" Танкеры: " + порт.танкеры_в_очереди)    
}

def terminateCondition() {
	return currentTime >= 240; //7 * 12 * 60;
}


result занятость_буксира = new Result([Буксиры.all.any.состояние]);
result длина_очереди = new Result([порт.количество_в_очереди]);
result Всего_обслужено_Митей = new Result([Буксиры.all.any.количество_обслуженных]);
result занятость_причала_1 = new Result([Причалы.all.filter[номер == Номер_причала._1].any.состояние]);
result занятость_причала_2 = new Result([Причалы.all.filter[номер == Номер_причала._2].any.состояние]);
result занятость_причала_3 = new Result([Причалы.all.filter[номер == Номер_причала._3].any.состояние]);
result Всего_заполнено_причалом_1 = new Result([Причалы.all.filter[номер == Номер_причала._1].any.количество_обслуженных_причалом]);
result Всего_заполнено_причалом_2 = new Result([Причалы.all.filter[номер == Номер_причала._2].any.количество_обслуженных_причалом]);
result Всего_заполнено_причалом_3 = new Result([Причалы.all.filter[номер == Номер_причала._3].any.количество_обслуженных_причалом]);
result Пропускная_способность = new Result([Буксиры.all.any.количество_обслуженных / currentTime * 60]);
result Длительность_работы = new Result([currentTime / 60]);

/* Animation */



event Timer() {
	//relevant _буксир = буксир;
	log(currentTime)
	for (Буксиры буксир : Буксиры.all){
		val шаг_хода_буксира = (((высота_границы_причалов - 1.5 * буксир.размер) 
								- (высота_границы_очереди + 1.5 * буксир.размер)) / 5) as int // исправить 5 на int(длительность_буксирования)
		log("Шаг буксира" + шаг_хода_буксира)
								
		if (буксир.состояние == Состояние_буксира.Идет_к_причалам){
			буксир._Y = буксир._Y + шаг_хода_буксира
			//log("Буксир едет к причалу. Y = " + буксир._Y + ". T: " + currentTime)
		}
		if (буксир.состояние == Состояние_буксира.Идет_к_очереди){
			буксир._Y = буксир._Y - шаг_хода_буксира
			//log("Буксир едет к очереди. Y = " + буксир._Y + ". T: " + currentTime)
		}
		log("Буксир: X=" + буксир._X + " Y=" + буксир._Y)
	}
			
	Timer.plan(currentTime + 1);
}

RaoColor Цвет_по_типу (Тип_танкера тип){
	switch тип {
		case Тип_танкера.Тип1:
			return RaoColor.RED
		case Тип_танкера.Тип2:
			return RaoColor.BLUE
		case Тип_танкера.Тип3:
			return RaoColor.YELLOW
		default:
			return RaoColor.BLACK
	}
		
}
String Картинка_танкера (Тип_танкера тип, Состояние_танкера состояние){
	if (тип == Тип_танкера.Тип1) {
		if (состояние == Состояние_танкера.Буксируется_к_причалам)
			return "images/tanker1_empty.png"
		else if (состояние == Состояние_танкера.Буксируется_от_причалов)
			return "images/tanker1_full.png"
	}
	else if (тип == Тип_танкера.Тип2) {
		if (состояние == Состояние_танкера.Буксируется_к_причалам)
			return "images/tanker2_empty.png"
		else if (состояние == Состояние_танкера.Буксируется_от_причалов)
			return "images/tanker2_full.png"
	}
	else if (тип == Тип_танкера.Тип2) {
		if (состояние == Состояние_танкера.Буксируется_к_причалам)
			return "images/tanker3_empty.png"
		else if (состояние == Состояние_танкера.Буксируется_от_причалов)
			return "images/tanker3_full.png"
	}
}

frame Кадр_порта {
	def init() {
		background = new Background(ширина, высота, RaoColor.WHITE)
	}	
	
	def draw() {
		/* Фон */
		if (шторм.состояние != Состояние_шторма.Спокоен){
			drawImage("images/storm.png", 0, 0);
		}
		else{
			drawImage("images/calm.png", 0, 0);
		}
		
		/* Отрисовка статики */	
		drawLine(0, высота_границы_очереди, ширина, высота_границы_очереди, RaoColor.BLACK); // Зона очереди
		drawLine(0, высота_границы_причалов, ширина, высота_границы_причалов, RaoColor.BLACK); // Зона причалов
			
		/* Отрисовка */
		
		// буксирование
		for (Буксиры буксир : Буксиры.all){
			//буксир
			drawRectangle(буксир._X, буксир._Y, буксир.размер, буксир.размер, буксир.цвет, буксир.цвет);
			drawText(Integer.toString(буксир._количество_обслуженных), буксир._X + 3, буксир._Y + 3); // изменить число
			
			//танкер
			for (Танкеры плывущий_танкер : Танкеры.all.filter[порядковый_номер == буксир.номер_танкера]){
				if (плывущий_танкер.состояние == Состояние_танкера.Буксируется_к_причалам)
					drawImage(Картинка_танкера(плывущий_танкер.тип, плывущий_танкер.состояние), буксир._X, буксир._Y - 120)
				else if (плывущий_танкер.состояние == Состояние_танкера.Буксируется_от_причалов)
					drawImage(Картинка_танкера(плывущий_танкер.тип, плывущий_танкер.состояние), буксир._X, буксир._Y + буксир.размер)
			}
		}
				
		// очередь
		var пустое_место = 0;
		for (Танкеры танкер_в_очереди : Танкеры.all){
			var место = танкер_в_очереди.порядковый_номер;
			if (танкер_в_очереди.состояние == Состояние_танкера.Пришел)
				drawRectangle(15 + (место % 8) * 40, высота_границы_очереди - 35 - (место / 8) * 40 + (пустое_место / 8) * 40, 30, 30, Цвет_по_типу(танкер_в_очереди.тип), RaoColor.BLACK)
			else
				пустое_место = пустое_место + 1
		}

		// причалы
		for (Причалы причал : Причалы.all){
			var отступ = 0;
			switch причал.номер {
				case _1:
					отступ = 0
				case _2:
					отступ = 2
				case _3:
					отступ = 4
			}
			
			if (причал.состояние == Состояние_причала.Занят)
				drawRectangle(50 + отступ * 50, высота - 20, 40, 20, Цвет_по_типу(причал.тип_танкера), RaoColor.BLACK)
			else
				drawRectangle(50 + отступ * 50, высота - 20, 40, 20, RaoColor.BLACK, RaoColor.BLACK)
		}
	}
}