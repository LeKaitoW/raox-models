enum Состояние_буксира {Стоит_у_очереди, Идет_к_причалам, Стоит_у_причалов, Идет_к_очереди}
enum Номер_причала {Номер_1, Номер_2, Номер_3}
enum Состояние_причала {Свободен, Ожидает, Заполняет}
enum Состояние_шторма {Спокоен, Штормит, Начался}
enum Тип_танкера {Тип_1, Тип_2, Тип_3}
enum Состояние_танкера {Пришел, Буксируется_к_причалам, Ожидает_у_причалов, Заполняется, Заполнен, Буксируется_от_причалов, Ушел}

constant ширина = 800
constant высота = 350
constant граница_очереди = ширина / 3
constant граница_причалов = 4 * ширина / 5

type Порт {
	int количество_в_очереди
	int номер_крайнего_танкера
}

type Буксиры {
	Состояние_буксира состояние
	int количество_обслуженных
	int номер_танкера

	/* Анимация */
	int размер
	int x
	int y
}

type Танкеры {
	Тип_танкера тип
	Состояние_танкера состояние
	double время_прихода
	int порядковый_номер
}

type Причалы {
	Номер_причала номер
	Состояние_причала состояние
	int количество_обслуженных_причалом
	Тип_танкера тип_танкера
	Состояние_танкера состояние_танкера
	int номер_танкера
}

type Штормы {
	Состояние_шторма состояние
}

resource порт = Порт.create(0, 0)
resource шторм = Штормы.create(Состояние_шторма.Спокоен)

sequence интервал_прихода1 = new Exponential(1200, 0.15)
sequence интервал_прихода2 = new Exponential(1201, 0.08)
sequence интервал_прихода3 = new Exponential(1202, 0.04)
sequence длительность_буксирования = new Values(#[5])
sequence длительность_заполнения1 = new Normal(1203, 9, 3)
sequence длительность_заполнения2 = new Normal(1204, 16, 4)
sequence длительность_заполнения3 = new Normal(1205, 23, 6)
sequence периодичность_шторма = new Exponential(1206, 0.001)
sequence длительность_шторма = new Normal(1207, 20, 10)

event Прихода_танкера1() {
	Танкеры.create(Тип_танкера.Тип_1, Состояние_танкера.Пришел, currentTime, порт.номер_крайнего_танкера + 1)
	Прихода_танкера1.plan(currentTime + интервал_прихода1.next())
	порт.количество_в_очереди = порт.количество_в_очереди + 1
	порт.номер_крайнего_танкера = порт.номер_крайнего_танкера + 1
}

event Прихода_танкера2() {
	Танкеры.create(Тип_танкера.Тип_2, Состояние_танкера.Пришел, currentTime, порт.номер_крайнего_танкера + 1)
	Прихода_танкера2.plan(currentTime + интервал_прихода2.next())
	порт.количество_в_очереди = порт.количество_в_очереди + 1
	порт.номер_крайнего_танкера = порт.номер_крайнего_танкера + 1
}

event Прихода_танкера3() {
	Танкеры.create(Тип_танкера.Тип_3, Состояние_танкера.Пришел, currentTime, порт.номер_крайнего_танкера + 1)
	Прихода_танкера3.plan(currentTime + интервал_прихода3.next())
	порт.количество_в_очереди = порт.количество_в_очереди + 1
	порт.номер_крайнего_танкера = порт.номер_крайнего_танкера + 1
}

event Начало_шторма() {
	шторм.состояние = Состояние_шторма.Начался
	Начало_шторма.plan(currentTime + периодичность_шторма.next())
}

operation Штормление() {
	relevant шторм_ = шторм.onlyif[состояние == Состояние_шторма.Начался]

	def duration() {
		return длительность_шторма.next()
	}
	def begin() {
		шторм_.состояние = Состояние_шторма.Штормит
	}
	def end() {
		шторм_.состояние = Состояние_шторма.Спокоен
	}
}

operation Буксирование_танкера_к_причалу() {
	relevant порт_ = порт.onlyif[количество_в_очереди > 0]
	relevant шторм_ = шторм.onlyif[состояние == Состояние_шторма.Спокоен]
	relevant буксир = Буксиры.accessible.filter[состояние == Состояние_буксира.Стоит_у_очереди].any
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Пришел].minBySafe[время_прихода]
	relevant причал = Причалы.all.filter[состояние == Состояние_причала.Свободен].any

	def duration() {
		return длительность_буксирования.next()
	}
	def begin() {
		порт_.количество_в_очереди = порт.количество_в_очереди - 1
		буксир.состояние = Состояние_буксира.Идет_к_причалам
		буксир.номер_танкера = танкер.порядковый_номер
		танкер.состояние = Состояние_танкера.Буксируется_к_причалам

		/* Анимация */
		буксир.x = граница_очереди + 120
	}
	def end() {
		буксир.состояние = Состояние_буксира.Стоит_у_причалов
		танкер.состояние = Состояние_танкера.Ожидает_у_причалов
		буксир.количество_обслуженных = буксир.количество_обслуженных + 1

		/* Анимация */
		буксир.x = граница_причалов - буксир.размер
	}
}

operation Заполнение_танкера() {
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Ожидает_у_причалов].any
	relevant причал = Причалы.accessible.filter[состояние == Состояние_причала.Свободен].any

	def duration(){
		switch танкер.тип {
			case Тип_танкера.Тип_1:
				return длительность_заполнения1.next()
			case Тип_танкера.Тип_2:
				return длительность_заполнения2.next()
			case Тип_танкера.Тип_3:
				return длительность_заполнения3.next()
		}
	}

	def begin() {
		причал.состояние = Состояние_причала.Заполняет
		танкер.состояние = Состояние_танкера.Заполняется
		причал.тип_танкера = танкер.тип
		причал.состояние_танкера = танкер.состояние
		причал.номер_танкера = танкер.порядковый_номер
	}
	def end() {
		причал.состояние = Состояние_причала.Ожидает
		причал.количество_обслуженных_причалом = причал.количество_обслуженных_причалом + 1
		танкер.состояние = Состояние_танкера.Заполнен
		причал.состояние_танкера = танкер.состояние
	}
}

operation Буксирование_танкера_от_причала() {
	relevant шторм_ = шторм.onlyif[состояние == Состояние_шторма.Спокоен]
	relevant буксир = Буксиры.accessible.filter[состояние == Состояние_буксира.Стоит_у_причалов].any
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Заполнен].any
	relevant причал = Причалы.accessible.filter [
		состояние == Состояние_причала.Ожидает && номер_танкера == танкер.порядковый_номер
	].any

	def duration() {
		return длительность_буксирования.next()
	}
	def begin() {
		буксир.состояние = Состояние_буксира.Идет_к_очереди
		буксир.номер_танкера = танкер.порядковый_номер
		танкер.состояние = Состояние_танкера.Буксируется_от_причалов
		причал.состояние = Состояние_причала.Свободен

		/* Анимация */
		буксир.x = граница_причалов - буксир.размер - 120
	}
	def end() {
		буксир.состояние = Состояние_буксира.Стоит_у_очереди
		буксир.количество_обслуженных = буксир.количество_обслуженных + 1
		танкер.состояние == Состояние_танкера.Ушел

		/* Анимация */
		буксир.x = граница_очереди
	}
}

operation Перемещения_пустого_буксира_к_очереди() {
	relevant порт_ = порт.onlyif[количество_в_очереди > 0]
	relevant шторм_ = шторм.onlyif[состояние == Состояние_шторма.Спокоен]
	relevant буксир = Буксиры.accessible.filter[состояние == Состояние_буксира.Стоит_у_причалов].any
	relevant танкер = Танкеры.accessible.filter[состояние == Состояние_танкера.Пришел].any
	relevant причал = Причалы.accessible.filter[состояние == Состояние_причала.Свободен].any

	def duration() {
		return длительность_буксирования.next()
	}
	def begin() {
		буксир.состояние = Состояние_буксира.Идет_к_очереди
		буксир.номер_танкера = 0

		/* Анимация */
		буксир.x = граница_причалов - буксир.размер - 120
	}
	def end() {
		буксир.состояние = Состояние_буксира.Стоит_у_очереди
		буксир.количество_обслуженных = буксир.количество_обслуженных + 1

		/* Анимация */
		буксир.x = граница_очереди
	}
}

logic Работа_модели {
	activity буксирование_танкера_к_причалу = new Activity(Буксирование_танкера_к_причалу.create())
	activity заполнение_танкера = new Activity(Заполнение_танкера.create())
	activity буксирование_танкера_от_причала = new Activity(Буксирование_танкера_от_причала.create())
	activity штормление = new Activity(Штормление.create())
	activity перемещения_пустого_буксира_к_очереди = new Activity(Перемещения_пустого_буксира_к_очереди.create())
}

def init() {
	Timer.plan(currentTime + 1)
	Причалы.create(Номер_причала.Номер_1, Состояние_причала.Свободен, 0, null, null, 0)
	Причалы.create(Номер_причала.Номер_2, Состояние_причала.Свободен, 0, null, null, 0)
	Причалы.create(Номер_причала.Номер_3, Состояние_причала.Свободен, 0, null, null, 0)
	Буксиры.create(Состояние_буксира.Стоит_у_очереди, 0, 0, 70, граница_очереди, 0)
	Прихода_танкера1.plan(currentTime + интервал_прихода1.next())
	Прихода_танкера2.plan(currentTime + интервал_прихода2.next())
	Прихода_танкера3.plan(currentTime + интервал_прихода3.next())
	Начало_шторма.plan(currentTime + периодичность_шторма.next())

	val ширина_фарватора_для_буксира = высота / Буксиры.all.size()
	for (var i = 0; i < Буксиры.all.size(); i++) {
		var буксир = Буксиры.all.get(i)
		буксир.y = ширина_фарватора_для_буксира * i + ширина_фарватора_для_буксира / 2
	}
}

def terminateCondition() {
	return currentTime >= 480
}

result Занятость_буксира = Result.create([Буксиры.all.any.состояние])
result Длина_очереди = Result.create([порт.количество_в_очереди])
result Всего_обслужено_буксиром = Result.create([Буксиры.all.any.количество_обслуженных])
result Занятость_причала_1 = Result.create([Причалы.all.filter[номер == Номер_причала.Номер_1].any.состояние])
result Занятость_причала_2 = Result.create([Причалы.all.filter[номер == Номер_причала.Номер_2].any.состояние])
result Занятость_причала_3 = Result.create([Причалы.all.filter[номер == Номер_причала.Номер_3].any.состояние])
result Всего_заполнено_причалом_1 = Result.create([
	Причалы.all.filter[номер == Номер_причала.Номер_1].any.количество_обслуженных_причалом
])
result Всего_заполнено_причалом_2 = Result.create([
	Причалы.all.filter[номер == Номер_причала.Номер_2].any.количество_обслуженных_причалом
])
result Всего_заполнено_причалом_3 = Result.create([
	Причалы.all.filter[номер == Номер_причала.Номер_3].any.количество_обслуженных_причалом
])
result Пропускная_способность = Result.create([Буксиры.all.any.количество_обслуженных / currentTime * 60])
result Длительность_работы = Result.create([currentTime / 60])

event Timer() {
	for (Буксиры буксир : Буксиры.all) {
		val шаг_хода_буксира = (((граница_причалов - 1.5 * буксир.размер) - (граница_очереди + 1.5 * буксир.размер)) /
			5) as int // исправить 5 на int(длительность_буксирования)
		if (буксир.состояние == Состояние_буксира.Идет_к_причалам)
			буксир.x = буксир.x + шаг_хода_буксира
		if (буксир.состояние == Состояние_буксира.Идет_к_очереди)
			буксир.x = буксир.x - шаг_хода_буксира
	}
	Timer.plan(currentTime + 1)
}

String Картинка_танкера (Тип_танкера тип_танкера, Состояние_танкера состояние){
	var тип = ""
	if (тип_танкера == Тип_танкера.Тип_1)
		тип = "1"
	else if (тип_танкера == Тип_танкера.Тип_2)
		тип = "2"
	else if (тип_танкера == Тип_танкера.Тип_3)
		тип = "3"

	if (состояние == Состояние_танкера.Буксируется_к_причалам || состояние == Состояние_танкера.Пришел ||
		состояние == Состояние_танкера.Заполняется)
		return "images/tanker" + тип + "_empty.png"
	else if (состояние == Состояние_танкера.Буксируется_от_причалов || состояние == Состояние_танкера.Заполнен)
		return "images/tanker" + тип + "_full.png"
}

frame Кадр_порта {
	def init() {
		background = new Background(ширина + 160, высота, RaoColor.WHITE)
	}

	def draw() {
		/* Фон */
		if (шторм.состояние != Состояние_шторма.Спокоен)
			drawImage("images/storm.png", 0, 0)
		else
			drawImage("images/calm.png", 0, 0)

		drawLine(граница_очереди, 0, граница_очереди, ширина, RaoColor.BLACK) // Зона очереди
		drawLine(граница_причалов, 0, граница_причалов, ширина, RaoColor.BLACK) // Зона причалов
		/* Буксирование */
		for (Буксиры буксир : Буксиры.all) {
			if (буксир.состояние == Состояние_буксира.Идет_к_очереди ||
				буксир.состояние == Состояние_буксира.Стоит_у_причалов)
				drawImage("images/tugboat-to-queue.png", буксир.x, буксир.y)
			else if (буксир.состояние == Состояние_буксира.Идет_к_причалам ||
				буксир.состояние == Состояние_буксира.Стоит_у_очереди)
				drawImage("images/tugboat-to-berths.png", буксир.x, буксир.y)

			for (Танкеры плывущий_танкер : Танкеры.all.filter[порядковый_номер == буксир.номер_танкера]) {
				if (плывущий_танкер.состояние == Состояние_танкера.Буксируется_к_причалам) {
					drawImage(Картинка_танкера(плывущий_танкер.тип, плывущий_танкер.состояние), буксир.x - 120,
						буксир.y)
					drawText(Integer.toString(плывущий_танкер.порядковый_номер), буксир.x - 22, буксир.y + 17,
						RaoColor.WHITE)
				} else if (плывущий_танкер.состояние == Состояние_танкера.Буксируется_от_причалов) {
					drawImage(Картинка_танкера(плывущий_танкер.тип, плывущий_танкер.состояние),
						буксир.x + буксир.размер, буксир.y)
					drawText(Integer.toString(плывущий_танкер.порядковый_номер), буксир.x + буксир.размер + 8,
						буксир.y + 17, RaoColor.WHITE)
				}
			}
		}

		/* Очередь */
		var пустое_место = 1
		for (Танкеры танкер_в_очереди : Танкеры.all) {
			var место = танкер_в_очереди.порядковый_номер
			if (танкер_в_очереди.состояние == Состояние_танкера.Пришел) {
				var X = граница_очереди - 120 - (место / 6) * 120 + (пустое_место / 6) * 120
				var Y = 15 + (место % 6) * (высота / 6)
				drawImage(Картинка_танкера(танкер_в_очереди.тип, танкер_в_очереди.состояние), X, Y)
				drawText(Integer.toString(танкер_в_очереди.порядковый_номер), X + 120 - 22, Y + 17, RaoColor.WHITE)
			} else
				пустое_место = пустое_место + 1
		}

		/* Причалы */
		for (Причалы причал : Причалы.all) {
			var отступ = 0
			switch причал.номер {
				case Номер_1:
					отступ = 0
				case Номер_2:
					отступ = 1
				case Номер_3:
					отступ = 2
			}

			drawRectangle(ширина - 100 - 1, 80 + отступ * 100, 100, 10, RaoColor.WHITE, RaoColor.BLACK)
			if (причал.состояние == Состояние_причала.Заполняет || причал.состояние == Состояние_причала.Ожидает) {
				drawImage(Картинка_танкера(причал.тип_танкера, причал.состояние_танкера), ширина - 120,
					50 + отступ * 100)
				if (причал.состояние_танкера == Состояние_танкера.Заполняется)
					drawText(Integer.toString(причал.номер_танкера), ширина - 22, 50 + отступ * 100 + 17,
						RaoColor.WHITE)
				else if (причал.состояние_танкера == Состояние_танкера.Заполнен)
					drawText(Integer.toString(причал.номер_танкера), ширина - 120 + 8, 50 + отступ * 100 + 17,
						RaoColor.WHITE)
			}

			if (причал.состояние == Состояние_причала.Заполняет)
				drawImage("images/clock.png", ширина - 20, 80 + отступ * 100 + 10)
			else if (причал.состояние == Состояние_причала.Ожидает)
				drawImage("images/done.png", ширина - 20, 80 + отступ * 100 + 10)
		}

		/* Мониторинг */
		drawText("Количество\nтанкеров\nв очереди: " + Integer.toString(порт.количество_в_очереди), ширина + 5, 5)
		var i = 1
		for (Буксиры буксир : Буксиры.all) {
			drawText("Количество\nобслуженных\nбуксиром " + Integer.toString(i) + ": " +
				Integer.toString(буксир.количество_обслуженных), ширина + 5, 85 * i)
			i++
		}
	}
}
