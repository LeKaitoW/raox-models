enum Состояние_парикмахера {Свободен, Занят}

type Парикмахерские {
	Состояние_парикмахера состояние_парикмахера;
	int количество_в_очереди;
	int количество_обслуженных;
}

resource парикмахерская = Парикмахерские.create(Состояние_парикмахера.Свободен, 0, 0);

event Событие_прихода_клиента() {
	Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
	парикмахерская.количество_в_очереди = парикмахерская.количество_в_очереди + 1;
}

operation Образец_обслуживания_клиента() {
	relevant _Парикмахерская = парикмахерская.onlyif [
		состояние_парикмахера == Состояние_парикмахера.Свободен && количество_в_очереди > 0
	];

	def begin() {
		_Парикмахерская.количество_в_очереди = _Парикмахерская.количество_в_очереди - 1;
		_Парикмахерская.состояние_парикмахера = Состояние_парикмахера.Занят;
	}
	def duration() {
		return длительность_обслуживания.next();
	}
	def end() {
		_Парикмахерская.состояние_парикмахера = Состояние_парикмахера.Свободен;
		_Парикмахерская.количество_обслуженных = _Парикмахерская.количество_обслуженных + 1;
	}
}

logic Model {
	activity обслуживание_клиента = new Activity(Образец_обслуживания_клиента.create());
}

sequence интервал_прихода = new Exponential(123456789, 1 / 30.0);
sequence длительность_обслуживания = new Uniform(123456789, 20, 40);

def init() {
	Событие_прихода_клиента.plan(currentTime + интервал_прихода.next());
}

def terminateCondition() {
	return currentTime >= 7 * 12 * 60;
}

result занятость_парикмахера = new Result([парикмахерская.состояние_парикмахера]);
result длина_очереди = new Result([парикмахерская.количество_в_очереди]);
result всего_обслужено = new Result([парикмахерская.количество_обслуженных], new LastValueStatistics());
result пропускная_способность = new Result([парикмахерская.количество_обслуженных / currentTime * 60]);
result длительность_работы = new Result([currentTime / 60], new LastValueStatistics());
